{
  "address": "0xa06f409403485BB32A47ef00Bc315428Fd098057",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "adminFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exitFee",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "refundFeesOnWithdraw",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "chargeOnDeposit",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "chargeOnExit",
              "type": "bool"
            }
          ],
          "internalType": "struct FeeCalc.Settings",
          "name": "_settings",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "costPerValidator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "processDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "processWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "adminFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exitFee",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "refundFeesOnWithdraw",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "chargeOnDeposit",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "chargeOnExit",
              "type": "bool"
            }
          ],
          "internalType": "struct FeeCalc.Settings",
          "name": "newSettings",
          "type": "tuple"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setAdminFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_exitFee",
          "type": "uint256"
        }
      ],
      "name": "setExitFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_refundFeesOnWithdraw",
          "type": "bool"
        }
      ],
      "name": "setRefundFeesOnWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x76be56ba3e35e0dd96cda9773553f52e5c826621cd9b335b4d8fa6ae95ef7b7b",
  "receipt": {
    "to": null,
    "from": "0xA120FAd0498ECbF755a675E3833158484123bF30",
    "contractAddress": "0xa06f409403485BB32A47ef00Bc315428Fd098057",
    "transactionIndex": 25,
    "gasUsed": "566029",
    "logsBloom": "0x
    "blockHash": "0x54f57979d4529fb1f3bbcbc2e30ae4c96ef1b541704bf85a4f851046c91d5522",
    "transactionHash": "0x76be56ba3e35e0dd96cda9773553f52e5c826621cd9b335b4d8fa6ae95ef7b7b",
    "logs": [
      {
        "transactionIndex": 25,
        "blockNumber": 6233344,
        "transactionHash": "0x76be56ba3e35e0dd96cda9773553f52e5c826621cd9b335b4d8fa6ae95ef7b7b",
        "address": "0xa06f409403485BB32A47ef00Bc315428Fd098057",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a120fad0498ecbf755a675e3833158484123bf30"
        ],
        "data": "0x",
        "logIndex": 48,
        "blockHash": "0x54f57979d4529fb1f3bbcbc2e30ae4c96ef1b541704bf85a4f851046c91d5522"
      }
    ],
    "blockNumber": 6233344,
    "cumulativeGasUsed": "3920512",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "adminFee": 10,
      "exitFee": 0,
      "refundFeesOnWithdraw": true,
      "chargeOnDeposit": true,
      "chargeOnExit": false
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "b098c02b927c81fd02abb8247583d190",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"adminFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exitFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"refundFeesOnWithdraw\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"chargeOnDeposit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"chargeOnExit\",\"type\":\"bool\"}],\"internalType\":\"struct FeeCalc.Settings\",\"name\":\"_settings\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"costPerValidator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"processDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"processWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"adminFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exitFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"refundFeesOnWithdraw\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"chargeOnDeposit\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"chargeOnExit\",\"type\":\"bool\"}],\"internalType\":\"struct FeeCalc.Settings\",\"name\":\"newSettings\",\"type\":\"tuple\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_exitFee\",\"type\":\"uint256\"}],\"name\":\"setExitFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_refundFeesOnWithdraw\",\"type\":\"bool\"}],\"name\":\"setRefundFeesOnWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v2/periphery/FeeCalc.sol\":\"FeeCalc\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0xde231558366826d7cb61725af8147965a61c53b77a352cc8c9af38fc5a92ac3c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/v2/periphery/FeeCalc.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable2Step} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\n\\ncontract FeeCalc is Ownable2Step {\\n    struct Settings {\\n        uint256 adminFee;\\n        uint256 exitFee;\\n        bool refundFeesOnWithdraw;\\n        bool chargeOnDeposit;\\n        bool chargeOnExit;\\n    }\\n    Settings private config;\\n    uint256 public adminFee;\\n    uint256 public costPerValidator;\\n\\n    uint256 private immutable BIPS = 10000;\\n    constructor(Settings memory _settings) Ownable2Step() {\\n        // admin fee in bips (10000 = 100%)\\n        adminFee = _settings.adminFee;\\n        config = _settings;\\n        costPerValidator = ((32 + (32 * adminFee)) * 1 ether) / BIPS;\\n    }\\n\\n    function set(Settings calldata newSettings) external onlyOwner {\\n        config = newSettings;\\n        adminFee = newSettings.adminFee;\\n    }\\n\\n    function setRefundFeesOnWithdraw(bool _refundFeesOnWithdraw) external onlyOwner {\\n        config.refundFeesOnWithdraw = _refundFeesOnWithdraw;\\n    }\\n\\n    function setExitFee(uint256 _exitFee) external onlyOwner {\\n        config.exitFee = _exitFee;\\n    }\\n\\n    function setAdminFee(uint256 amount) external onlyOwner {\\n        adminFee = amount;\\n        config.adminFee = amount;\\n    }\\n\\n    function processDeposit(uint256 value, address _sender) external view returns (uint256 amt, uint256 fee) {\\n        // TODO: semder is currently unsused but can be used later to calculate a fee reduction based on token holdings\\n        if (config.chargeOnDeposit) {\\n            fee = (value * adminFee) / BIPS;\\n            amt = value - fee;\\n        }\\n    }\\n\\n    function processWithdraw(uint256 value, address _sender) external view returns (uint256 amt, uint256 fee) {\\n        // TODO: semder is currently unsused but can be used later to calculate a fee reduction based on token holdings\\n        if (config.refundFeesOnWithdraw) {\\n            fee = (value * adminFee) / BIPS;\\n            amt = value + fee;\\n        } else if (config.chargeOnExit) {\\n            fee = (value * config.exitFee) / BIPS;\\n            amt = value - fee;\\n        } else {\\n            fee = 0;\\n            amt = value;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1b91581b9fe0fa69fd4faa2ad01b3edb66cc35e4ab26831b57e169f214bd6c0\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a060405261271060805234801561001657600080fd5b5060405161097038038061097083398101604081905261003591610154565b61003e336100d3565b80516005819055600281905560208083015160035560408301516004805460608601516080808801511515620100000262ff0000199215156101000261ff00199615159690961661ffff1990941693909317949094171617905551916100a3916101f9565b6100ae906020610216565b6100c090670de0b6b3a76400006101f9565b6100ca9190610229565b6006555061024b565b600180546001600160a01b03191690556100ec816100ef565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8051801515811461014f57600080fd5b919050565b600060a0828403121561016657600080fd5b60405160a081016001600160401b038111828210171561019657634e487b7160e01b600052604160045260246000fd5b806040525082518152602083015160208201526101b56040840161013f565b60408201526101c66060840161013f565b60608201526101d76080840161013f565b60808201529392505050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610210576102106101e3565b92915050565b80820180821115610210576102106101e3565b60008261024657634e487b7160e01b600052601260045260246000fd5b500490565b6080516106fc610274600039600081816101ed0152818161024d01526102b201526106fc6000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063a0be06f91161008c578063e30c397811610066578063e30c39781461019b578063e5a583a9146101ac578063eb52f3ae146101bf578063f2fde38b146101c857600080fd5b8063a0be06f91461015e578063c0f7056c14610175578063dc5df6391461018857600080fd5b806301e41bba146100d45780633b3436f614610101578063715018a61461011457806379ba50971461011e5780638beb60b6146101265780638da5cb5b14610139575b600080fd5b6100e76100e2366004610533565b6101db565b604080519283526020830191909152015b60405180910390f35b6100e761010f366004610533565b61029b565b61011c6102fe565b005b61011c610312565b61011c61013436600461055f565b610391565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100f8565b61016760055481565b6040519081526020016100f8565b61011c610183366004610586565b6103a3565b61011c6101963660046105aa565b6103be565b6001546001600160a01b0316610146565b61011c6101ba36600461055f565b6103db565b61016760065481565b61011c6101d63660046105c2565b6103e8565b600454600090819060ff1615610237577f00000000000000000000000000000000000000000000000000000000000000006005548561021a91906105f3565b6102249190610610565b90506102308185610632565b9150610294565b60045462010000900460ff161561028d576003547f00000000000000000000000000000000000000000000000000000000000000009061027790866105f3565b6102819190610610565b90506102308185610645565b5082905060005b9250929050565b6004546000908190610100900460ff1615610294577f0000000000000000000000000000000000000000000000000000000000000000600554856102df91906105f3565b6102e99190610610565b90506102f58185610645565b91509250929050565b610306610459565b61031060006104b3565b565b60015433906001600160a01b031681146103855760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084015b60405180910390fd5b61038e816104b3565b50565b610399610459565b6005819055600255565b6103ab610459565b6004805460ff1916911515919091179055565b6103c6610459565b8060026103d38282610658565b505035600555565b6103e3610459565b600355565b6103f0610459565b600180546001600160a01b0383166001600160a01b031990911681179091556104216000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6000546001600160a01b031633146103105760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161037c565b600180546001600160a01b031916905561038e81600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461052e57600080fd5b919050565b6000806040838503121561054657600080fd5b8235915061055660208401610517565b90509250929050565b60006020828403121561057157600080fd5b5035919050565b801515811461038e57600080fd5b60006020828403121561059857600080fd5b81356105a381610578565b9392505050565b600060a082840312156105bc57600080fd5b50919050565b6000602082840312156105d457600080fd5b6105a382610517565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761060a5761060a6105dd565b92915050565b60008261062d57634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561060a5761060a6105dd565b8181038181111561060a5761060a6105dd565b813581556020820135600182015560028101604083013561067881610578565b8154606085013561068881610578565b608086013561069681610578565b90151560081b61ff001662ffffff199290921692151560ff16929092171790151560101b62ff000016179055505056fea26469706673582212206421837392b8e91d6dacd1ae82ef1c709308fa2a2abd91758213d711c3b8d6e564736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063a0be06f91161008c578063e30c397811610066578063e30c39781461019b578063e5a583a9146101ac578063eb52f3ae146101bf578063f2fde38b146101c857600080fd5b8063a0be06f91461015e578063c0f7056c14610175578063dc5df6391461018857600080fd5b806301e41bba146100d45780633b3436f614610101578063715018a61461011457806379ba50971461011e5780638beb60b6146101265780638da5cb5b14610139575b600080fd5b6100e76100e2366004610533565b6101db565b604080519283526020830191909152015b60405180910390f35b6100e761010f366004610533565b61029b565b61011c6102fe565b005b61011c610312565b61011c61013436600461055f565b610391565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100f8565b61016760055481565b6040519081526020016100f8565b61011c610183366004610586565b6103a3565b61011c6101963660046105aa565b6103be565b6001546001600160a01b0316610146565b61011c6101ba36600461055f565b6103db565b61016760065481565b61011c6101d63660046105c2565b6103e8565b600454600090819060ff1615610237577f00000000000000000000000000000000000000000000000000000000000000006005548561021a91906105f3565b6102249190610610565b90506102308185610632565b9150610294565b60045462010000900460ff161561028d576003547f00000000000000000000000000000000000000000000000000000000000000009061027790866105f3565b6102819190610610565b90506102308185610645565b5082905060005b9250929050565b6004546000908190610100900460ff1615610294577f0000000000000000000000000000000000000000000000000000000000000000600554856102df91906105f3565b6102e99190610610565b90506102f58185610645565b91509250929050565b610306610459565b61031060006104b3565b565b60015433906001600160a01b031681146103855760405162461bcd60e51b815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f7420746865206044820152683732bb9037bbb732b960b91b60648201526084015b60405180910390fd5b61038e816104b3565b50565b610399610459565b6005819055600255565b6103ab610459565b6004805460ff1916911515919091179055565b6103c6610459565b8060026103d38282610658565b505035600555565b6103e3610459565b600355565b6103f0610459565b600180546001600160a01b0383166001600160a01b031990911681179091556104216000546001600160a01b031690565b6001600160a01b03167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b6000546001600160a01b031633146103105760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161037c565b600180546001600160a01b031916905561038e81600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461052e57600080fd5b919050565b6000806040838503121561054657600080fd5b8235915061055660208401610517565b90509250929050565b60006020828403121561057157600080fd5b5035919050565b801515811461038e57600080fd5b60006020828403121561059857600080fd5b81356105a381610578565b9392505050565b600060a082840312156105bc57600080fd5b50919050565b6000602082840312156105d457600080fd5b6105a382610517565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761060a5761060a6105dd565b92915050565b60008261062d57634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561060a5761060a6105dd565b8181038181111561060a5761060a6105dd565b813581556020820135600182015560028101604083013561067881610578565b8154606085013561068881610578565b608086013561069681610578565b90151560081b61ff001662ffffff199290921692151560ff16929092171790151560101b62ff000016179055505056fea26469706673582212206421837392b8e91d6dacd1ae82ef1c709308fa2a2abd91758213d711c3b8d6e564736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4000,
        "contract": "contracts/v2/periphery/FeeCalc.sol:FeeCalc",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4113,
        "contract": "contracts/v2/periphery/FeeCalc.sol:FeeCalc",
        "label": "_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 18311,
        "contract": "contracts/v2/periphery/FeeCalc.sol:FeeCalc",
        "label": "config",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Settings)18308_storage"
      },
      {
        "astId": 18313,
        "contract": "contracts/v2/periphery/FeeCalc.sol:FeeCalc",
        "label": "adminFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 18315,
        "contract": "contracts/v2/periphery/FeeCalc.sol:FeeCalc",
        "label": "costPerValidator",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_struct(Settings)18308_storage": {
        "encoding": "inplace",
        "label": "struct FeeCalc.Settings",
        "members": [
          {
            "astId": 18299,
            "contract": "contracts/v2/periphery/FeeCalc.sol:FeeCalc",
            "label": "adminFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 18301,
            "contract": "contracts/v2/periphery/FeeCalc.sol:FeeCalc",
            "label": "exitFee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 18303,
            "contract": "contracts/v2/periphery/FeeCalc.sol:FeeCalc",
            "label": "refundFeesOnWithdraw",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 18305,
            "contract": "contracts/v2/periphery/FeeCalc.sol:FeeCalc",
            "label": "chargeOnDeposit",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 18307,
            "contract": "contracts/v2/periphery/FeeCalc.sol:FeeCalc",
            "label": "chargeOnExit",
            "offset": 2,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
