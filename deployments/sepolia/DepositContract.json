{
  "address": "0xEb9e7570f8D5ac7D0Abfbed902A784E84dF16a78",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "withdrawal_credentials",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "amount",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "index",
          "type": "bytes"
        }
      ],
      "name": "DepositEvent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "withdrawal_credentials",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "deposit_data_root",
          "type": "bytes32"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_deposit_count",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get_deposit_root",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rug",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x0a29295954637531c3f1f6fb751239e58a6d615df06f73e902d057feba7d9ab9",
  "receipt": {
    "to": null,
    "from": "0xA120FAd0498ECbF755a675E3833158484123bF30",
    "contractAddress": "0xEb9e7570f8D5ac7D0Abfbed902A784E84dF16a78",
    "transactionIndex": 23,
    "gasUsed": "1227961",
    "logsBloom": "0x
    "blockHash": "0xe0592757871a645742cf6283405e5efa72cddece58c0531338f70aa29b1cac4b",
    "transactionHash": "0x0a29295954637531c3f1f6fb751239e58a6d615df06f73e902d057feba7d9ab9",
    "logs": [],
    "blockNumber": 6233341,
    "cumulativeGasUsed": "7421045",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0a8f8cbd3ce11316bfb7ec95fa86f28d",
  "metadata": "{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"withdrawal_credentials\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"amount\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"index\",\"type\":\"bytes\"}],\"name\":\"DepositEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"withdrawal_credentials\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"deposit_data_root\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_deposit_count\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_deposit_root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rug\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deposit(bytes,bytes,bytes,bytes32)\":{\"params\":{\"deposit_data_root\":\"The SHA-256 hash of the SSZ-encoded DepositData object. Used as a protection against malformed input.\",\"pubkey\":\"A BLS12-381 public key.\",\"signature\":\"A BLS12-381 signature.\",\"withdrawal_credentials\":\"Commitment to a public key for withdrawals.\"}},\"get_deposit_count()\":{\"returns\":{\"_0\":\"The deposit count encoded as a little endian 64-bit number.\"}},\"get_deposit_root()\":{\"returns\":{\"_0\":\"The deposit root hash.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Interface identification is specified in ERC-165. This function  uses less than 30,000 gas.\",\"params\":{\"interfaceId\":\"The interface identifier, as specified in ERC-165\"},\"returns\":{\"_0\":\"`true` if the contract implements `interfaceId` and  `interfaceId` is not 0xffffffff, `false` otherwise\"}}},\"version\":1},\"userdoc\":{\"events\":{\"DepositEvent(bytes,bytes,bytes,bytes,bytes)\":{\"notice\":\"A processed deposit event.\"}},\"kind\":\"user\",\"methods\":{\"deposit(bytes,bytes,bytes,bytes32)\":{\"notice\":\"Submit a Phase 0 DepositData object.\"},\"get_deposit_count()\":{\"notice\":\"Query the current deposit count.\"},\"get_deposit_root()\":{\"notice\":\"Query the current deposit root hash.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"}},\"notice\":\"This is the Ethereum 2.0 deposit contract interface. For more information see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/DepositContract.sol\":\"DepositContract\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/mocks/DepositContract.sol\":{\"content\":\"// \\u250f\\u2501\\u2501\\u2501\\u2513\\u2501\\u250f\\u2513\\u2501\\u250f\\u2513\\u2501\\u2501\\u250f\\u2501\\u2501\\u2501\\u2513\\u2501\\u2501\\u250f\\u2501\\u2501\\u2501\\u2513\\u2501\\u2501\\u2501\\u2501\\u250f\\u2501\\u2501\\u2501\\u2513\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u250f\\u2513\\u2501\\u2501\\u2501\\u2501\\u2501\\u250f\\u2501\\u2501\\u2501\\u2513\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u250f\\u2513\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u250f\\u2513\\u2501\\n// \\u2503\\u250f\\u2501\\u2501\\u251b\\u250f\\u251b\\u2517\\u2513\\u2503\\u2503\\u2501\\u2501\\u2503\\u250f\\u2501\\u2513\\u2503\\u2501\\u2501\\u2503\\u250f\\u2501\\u2513\\u2503\\u2501\\u2501\\u2501\\u2501\\u2517\\u2513\\u250f\\u2513\\u2503\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u250f\\u251b\\u2517\\u2513\\u2501\\u2501\\u2501\\u2501\\u2503\\u250f\\u2501\\u2513\\u2503\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u250f\\u251b\\u2517\\u2513\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u250f\\u251b\\u2517\\u2513\\n// \\u2503\\u2517\\u2501\\u2501\\u2513\\u2517\\u2513\\u250f\\u251b\\u2503\\u2517\\u2501\\u2513\\u2517\\u251b\\u250f\\u251b\\u2503\\u2501\\u2501\\u2503\\u2503\\u2501\\u2503\\u2503\\u2501\\u2501\\u2501\\u2501\\u2501\\u2503\\u2503\\u2503\\u2503\\u250f\\u2501\\u2501\\u2513\\u250f\\u2501\\u2501\\u2513\\u250f\\u2501\\u2501\\u2513\\u250f\\u2501\\u2501\\u2513\\u250f\\u2513\\u2517\\u2513\\u250f\\u251b\\u2501\\u2501\\u2501\\u2501\\u2503\\u2503\\u2501\\u2517\\u251b\\u250f\\u2501\\u2501\\u2513\\u250f\\u2501\\u2513\\u2501\\u2517\\u2513\\u250f\\u251b\\u250f\\u2501\\u2513\\u250f\\u2501\\u2501\\u2513\\u2501\\u250f\\u2501\\u2501\\u2513\\u2517\\u2513\\u250f\\u251b\\n// \\u2503\\u250f\\u2501\\u2501\\u251b\\u2501\\u2503\\u2503\\u2501\\u2503\\u250f\\u2513\\u2503\\u250f\\u2501\\u251b\\u250f\\u251b\\u2501\\u2501\\u2503\\u2503\\u2501\\u2503\\u2503\\u2501\\u2501\\u2501\\u2501\\u2501\\u2503\\u2503\\u2503\\u2503\\u2503\\u250f\\u2513\\u2503\\u2503\\u250f\\u2513\\u2503\\u2503\\u250f\\u2513\\u2503\\u2503\\u2501\\u2501\\u252b\\u2523\\u252b\\u2501\\u2503\\u2503\\u2501\\u2501\\u2501\\u2501\\u2501\\u2503\\u2503\\u2501\\u250f\\u2513\\u2503\\u250f\\u2513\\u2503\\u2503\\u250f\\u2513\\u2513\\u2501\\u2503\\u2503\\u2501\\u2503\\u250f\\u251b\\u2517\\u2501\\u2513\\u2503\\u2501\\u2503\\u250f\\u2501\\u251b\\u2501\\u2503\\u2503\\u2501\\n// \\u2503\\u2517\\u2501\\u2501\\u2513\\u2501\\u2503\\u2517\\u2513\\u2503\\u2503\\u2503\\u2503\\u2503\\u2503\\u2517\\u2501\\u2513\\u250f\\u2513\\u2503\\u2517\\u2501\\u251b\\u2503\\u2501\\u2501\\u2501\\u2501\\u250f\\u251b\\u2517\\u251b\\u2503\\u2503\\u2503\\u2501\\u252b\\u2503\\u2517\\u251b\\u2503\\u2503\\u2517\\u251b\\u2503\\u2523\\u2501\\u2501\\u2503\\u2503\\u2503\\u2501\\u2503\\u2517\\u2513\\u2501\\u2501\\u2501\\u2501\\u2503\\u2517\\u2501\\u251b\\u2503\\u2503\\u2517\\u251b\\u2503\\u2503\\u2503\\u2503\\u2503\\u2501\\u2503\\u2517\\u2513\\u2503\\u2503\\u2501\\u2503\\u2517\\u251b\\u2517\\u2513\\u2503\\u2517\\u2501\\u2513\\u2501\\u2503\\u2517\\u2513\\n// \\u2517\\u2501\\u2501\\u2501\\u251b\\u2501\\u2517\\u2501\\u251b\\u2517\\u251b\\u2517\\u251b\\u2517\\u2501\\u2501\\u2501\\u251b\\u2517\\u251b\\u2517\\u2501\\u2501\\u2501\\u251b\\u2501\\u2501\\u2501\\u2501\\u2517\\u2501\\u2501\\u2501\\u251b\\u2517\\u2501\\u2501\\u251b\\u2503\\u250f\\u2501\\u251b\\u2517\\u2501\\u2501\\u251b\\u2517\\u2501\\u2501\\u251b\\u2517\\u251b\\u2501\\u2517\\u2501\\u251b\\u2501\\u2501\\u2501\\u2501\\u2517\\u2501\\u2501\\u2501\\u251b\\u2517\\u2501\\u2501\\u251b\\u2517\\u251b\\u2517\\u251b\\u2501\\u2517\\u2501\\u251b\\u2517\\u251b\\u2501\\u2517\\u2501\\u2501\\u2501\\u251b\\u2517\\u2501\\u2501\\u251b\\u2501\\u2517\\u2501\\u251b\\n// \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2503\\u2503\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n// \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2517\\u251b\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n\\n// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity 0.6.11;\\n\\n// This interface is designed to be compatible with the Vyper version.\\n/// @notice This is the Ethereum 2.0 deposit contract interface.\\n/// For more information see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs\\ninterface IDepositContract {\\n    /// @notice A processed deposit event.\\n    event DepositEvent(bytes pubkey, bytes withdrawal_credentials, bytes amount, bytes signature, bytes index);\\n\\n    /// @notice Submit a Phase 0 DepositData object.\\n    /// @param pubkey A BLS12-381 public key.\\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\\n    /// @param signature A BLS12-381 signature.\\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\\n    /// Used as a protection against malformed input.\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable;\\n\\n    /// @notice Query the current deposit root hash.\\n    /// @return The deposit root hash.\\n    function get_deposit_root() external view returns (bytes32);\\n\\n    /// @notice Query the current deposit count.\\n    /// @return The deposit count encoded as a little endian 64-bit number.\\n    function get_deposit_count() external view returns (bytes memory);\\n}\\n\\n// Based on official specification in https://eips.ethereum.org/EIPS/eip-165\\ninterface ERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceId` and\\n    ///  `interfaceId` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool);\\n}\\n\\n// This is a rewrite of the Vyper Eth2.0 deposit contract in Solidity.\\n// It tries to stay as close as possible to the original source code.\\n/// @notice This is the Ethereum 2.0 deposit contract interface.\\n/// For more information see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs\\ncontract DepositContract is IDepositContract, ERC165 {\\n    uint constant DEPOSIT_CONTRACT_TREE_DEPTH = 4; // changed to make it cheaper for testing - chimera\\n    // NOTE: this also ensures `deposit_count` will fit into 64-bits\\n    uint constant MAX_DEPOSIT_COUNT = 2 ** DEPOSIT_CONTRACT_TREE_DEPTH - 1;\\n\\n    bytes32[DEPOSIT_CONTRACT_TREE_DEPTH] branch;\\n    uint256 deposit_count;\\n\\n    bytes32[DEPOSIT_CONTRACT_TREE_DEPTH] zero_hashes;\\n\\n    // added for testing\\n    address private owner;\\n\\n    constructor() public {\\n        owner = msg.sender;\\n        // Compute hashes in empty sparse Merkle tree\\n        for (uint height = 0; height < DEPOSIT_CONTRACT_TREE_DEPTH - 1; height++)\\n            zero_hashes[height + 1] = sha256(abi.encodePacked(zero_hashes[height], zero_hashes[height]));\\n    }\\n\\n    function get_deposit_root() external view override returns (bytes32) {\\n        bytes32 node;\\n        uint size = deposit_count;\\n        for (uint height = 0; height < DEPOSIT_CONTRACT_TREE_DEPTH; height++) {\\n            if ((size & 1) == 1) node = sha256(abi.encodePacked(branch[height], node));\\n            else node = sha256(abi.encodePacked(node, zero_hashes[height]));\\n            size /= 2;\\n        }\\n        return sha256(abi.encodePacked(node, to_little_endian_64(uint64(deposit_count)), bytes24(0)));\\n    }\\n\\n    function get_deposit_count() external view override returns (bytes memory) {\\n        return to_little_endian_64(uint64(deposit_count));\\n    }\\n\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable override {\\n        // Extended ABI length checks since dynamic types are used.\\n        require(pubkey.length == 48, \\\"DepositContract: invalid pubkey length\\\");\\n        require(withdrawal_credentials.length == 32, \\\"DepositContract: invalid withdrawal_credentials length\\\");\\n        require(signature.length == 96, \\\"DepositContract: invalid signature length\\\");\\n\\n        // Check deposit amount\\n        require(msg.value >= 1 ether, \\\"DepositContract: deposit value too low\\\");\\n        require(msg.value % 1 gwei == 0, \\\"DepositContract: deposit value not multiple of gwei\\\");\\n        uint deposit_amount = msg.value / 1 gwei;\\n        require(deposit_amount <= type(uint64).max, \\\"DepositContract: deposit value too high\\\");\\n\\n        // Emit `DepositEvent` log\\n        bytes memory amount = to_little_endian_64(uint64(deposit_amount));\\n        emit DepositEvent(\\n            pubkey,\\n            withdrawal_credentials,\\n            amount,\\n            signature,\\n            to_little_endian_64(uint64(deposit_count))\\n        );\\n\\n        // Compute deposit data root (`DepositData` hash tree root)\\n        bytes32 pubkey_root = sha256(abi.encodePacked(pubkey, bytes16(0)));\\n        bytes32 signature_root = sha256(\\n            abi.encodePacked(\\n                sha256(abi.encodePacked(signature[:64])),\\n                sha256(abi.encodePacked(signature[64:], bytes32(0)))\\n            )\\n        );\\n        bytes32 node = sha256(\\n            abi.encodePacked(\\n                sha256(abi.encodePacked(pubkey_root, withdrawal_credentials)),\\n                sha256(abi.encodePacked(amount, bytes24(0), signature_root))\\n            )\\n        );\\n\\n        // Verify computed and expected deposit data roots match\\n        require(\\n            node == deposit_data_root,\\n            \\\"DepositContract: reconstructed DepositData does not match supplied deposit_data_root\\\"\\n        );\\n\\n        // Avoid overflowing the Merkle tree (and prevent edge case in computing `branch`)\\n        require(deposit_count < MAX_DEPOSIT_COUNT, \\\"DepositContract: merkle tree full\\\");\\n\\n        // Add deposit data root to Merkle tree (update a single `branch` node)\\n        deposit_count += 1;\\n        uint size = deposit_count;\\n        for (uint height = 0; height < DEPOSIT_CONTRACT_TREE_DEPTH; height++) {\\n            if ((size & 1) == 1) {\\n                branch[height] = node;\\n                return;\\n            }\\n            node = sha256(abi.encodePacked(branch[height], node));\\n            size /= 2;\\n        }\\n        // As the loop should always end prematurely with the `return` statement,\\n        // this code should be unreachable. We assert `false` just to be safe.\\n        assert(false);\\n    }\\n\\n    // added for testing\\n    function rug() external {\\n        payable(owner).transfer(address(this).balance);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) external pure override returns (bool) {\\n        return interfaceId == type(ERC165).interfaceId || interfaceId == type(IDepositContract).interfaceId;\\n    }\\n\\n    function to_little_endian_64(uint64 value) internal pure returns (bytes memory ret) {\\n        ret = new bytes(8);\\n        bytes8 bytesValue = bytes8(value);\\n        // Byteswapping during copying to bytes.\\n        ret[0] = bytesValue[7];\\n        ret[1] = bytesValue[6];\\n        ret[2] = bytesValue[5];\\n        ret[3] = bytesValue[4];\\n        ret[4] = bytesValue[3];\\n        ret[5] = bytesValue[2];\\n        ret[6] = bytesValue[1];\\n        ret[7] = bytesValue[0];\\n    }\\n}\\n\",\"keccak256\":\"0xa3964d32d8509399e675008e860026f00499e40e97672f04b456968a7ade08c3\",\"license\":\"CC0-1.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600980546001600160a01b0319163317905560005b60038110156101145760026005826004811061003e57fe5b01546005836004811061004d57fe5b015460405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083106100a45780518252601f199092019160209182019101610085565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa1580156100e3573d6000803e3d6000fd5b5050506040513d60208110156100f857600080fd5b50516005600183016004811061010a57fe5b0155600101610026565b5061137b806101246000396000f3fe60806040526004361061004a5760003560e01c806301ffc9a71461004f5780632289511814610097578063621fd130146101ad578063c5f2892f14610237578063e9be02aa1461025e575b600080fd5b34801561005b57600080fd5b506100836004803603602081101561007257600080fd5b50356001600160e01b031916610273565b604080519115158252519081900360200190f35b6101ab600480360360808110156100ad57600080fd5b8101906020810181356401000000008111156100c857600080fd5b8201836020820111156100da57600080fd5b803590602001918460018302840111640100000000831117156100fc57600080fd5b91939092909160208101903564010000000081111561011a57600080fd5b82018360208201111561012c57600080fd5b8035906020019184600183028401116401000000008311171561014e57600080fd5b91939092909160208101903564010000000081111561016c57600080fd5b82018360208201111561017e57600080fd5b803590602001918460018302840111640100000000831117156101a057600080fd5b9193509150356102aa565b005b3480156101b957600080fd5b506101c2610d03565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101fc5781810151838201526020016101e4565b50505050905090810190601f1680156102295780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561024357600080fd5b5061024c610d15565b60408051918252519081900360200190f35b34801561026a57600080fd5b506101ab610fe3565b60006001600160e01b031982166301ffc9a760e01b14806102a457506001600160e01b03198216638564090760e01b145b92915050565b603086146102e95760405162461bcd60e51b81526004018080602001828103825260268152602001806112aa6026913960400191505060405180910390fd5b602084146103285760405162461bcd60e51b81526004018080602001828103825260368152602001806112416036913960400191505060405180910390fd5b606082146103675760405162461bcd60e51b815260040180806020018281038252602981526020018061131d6029913960400191505060405180910390fd5b670de0b6b3a76400003410156103ae5760405162461bcd60e51b81526004018080602001828103825260268152602001806112f76026913960400191505060405180910390fd5b633b9aca003406156103f15760405162461bcd60e51b81526004018080602001828103825260338152602001806112776033913960400191505060405180910390fd5b633b9aca00340467ffffffffffffffff81111561043f5760405162461bcd60e51b81526004018080602001828103825260278152602001806112d06027913960400191505060405180910390fd5b606061044a8261101f565b90507f649bbc62d0e31342afea4e5cd82d4049e7e1ee912fc0889aa790803be39038c589898989858a8a61047f60045461101f565b6040805160a0808252810189905290819060208201908201606083016080840160c085018e8e80828437600083820152601f01601f191690910187810386528c815260200190508c8c808284376000838201819052601f909101601f191690920188810386528c5181528c51602091820193918e019250908190849084905b838110156105165781810151838201526020016104fe565b50505050905090810190601f1680156105435780820380516001836020036101000a031916815260200191505b5086810383528881526020018989808284376000838201819052601f909101601f19169092018881038452895181528951602091820193918b019250908190849084905b8381101561059f578181015183820152602001610587565b50505050905090810190601f1680156105cc5780820380516001836020036101000a031916815260200191505b509d505050505050505050505050505060405180910390a1600060028a8a600060801b604051602001808484808284376fffffffffffffffffffffffffffffffff199094169190930190815260408051600f19818403018152601090920190819052815191955093508392506020850191508083835b602083106106615780518252601f199092019160209182019101610642565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa1580156106a0573d6000803e3d6000fd5b5050506040513d60208110156106b557600080fd5b5051905060006002806106cb6040848a8c6111a3565b6040516020018083838082843780830192505050925050506040516020818303038152906040526040518082805190602001908083835b602083106107215780518252601f199092019160209182019101610702565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015610760573d6000803e3d6000fd5b5050506040513d602081101561077557600080fd5b50516002610786896040818d6111a3565b60405160009060200180848480828437919091019283525050604080518083038152602092830191829052805190945090925082918401908083835b602083106107e15780518252601f1990920191602091820191016107c2565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015610820573d6000803e3d6000fd5b5050506040513d602081101561083557600080fd5b5051604080516020818101949094528082019290925280518083038201815260609092019081905281519192909182918401908083835b6020831061088b5780518252601f19909201916020918201910161086c565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa1580156108ca573d6000803e3d6000fd5b5050506040513d60208110156108df57600080fd5b50516040805160208101858152929350600092600292839287928f928f92018383808284378083019250505093505050506040516020818303038152906040526040518082805190602001908083835b6020831061094e5780518252601f19909201916020918201910161092f565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa15801561098d573d6000803e3d6000fd5b5050506040513d60208110156109a257600080fd5b50516040518651600291889160009188916020918201918291908601908083835b602083106109e25780518252601f1990920191602091820191016109c3565b6001836020036101000a0380198251168184511680821785525050505050509050018367ffffffffffffffff191667ffffffffffffffff1916815260180182815260200193505050506040516020818303038152906040526040518082805190602001908083835b60208310610a695780518252601f199092019160209182019101610a4a565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015610aa8573d6000803e3d6000fd5b5050506040513d6020811015610abd57600080fd5b5051604080516020818101949094528082019290925280518083038201815260609092019081905281519192909182918401908083835b60208310610b135780518252601f199092019160209182019101610af4565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015610b52573d6000803e3d6000fd5b5050506040513d6020811015610b6757600080fd5b50519050858114610ba95760405162461bcd60e51b81526004018080602001828103825260548152602001806111ed6054913960600191505060405180910390fd5b600454600f11610bea5760405162461bcd60e51b81526004018080602001828103825260218152602001806111cc6021913960400191505060405180910390fd5b600480546001019081905560005b6004811015610cf7578160011660011415610c2a578260008260048110610c1b57fe5b015550610cfa95505050505050565b600260008260048110610c3957fe5b01548460405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310610c915780518252601f199092019160209182019101610c72565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015610cd0573d6000803e3d6000fd5b5050506040513d6020811015610ce557600080fd5b50519250600282049150600101610bf8565b50fe5b50505050505050565b6060610d1060045461101f565b905090565b6004546000908190815b6004811015610ec6578160011660011415610df857600260008260048110610d4357fe5b01548460405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310610d9b5780518252601f199092019160209182019101610d7c565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015610dda573d6000803e3d6000fd5b5050506040513d6020811015610def57600080fd5b50519250610eb8565b60028360058360048110610e0857fe5b015460405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310610e5f5780518252601f199092019160209182019101610e40565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015610e9e573d6000803e3d6000fd5b5050506040513d6020811015610eb357600080fd5b505192505b600282049150600101610d1f565b50600282610ed560045461101f565b600060401b6040516020018084815260200183805190602001908083835b60208310610f125780518252601f199092019160209182019101610ef3565b51815160209384036101000a600019018019909216911617905267ffffffffffffffff199590951692019182525060408051808303600719018152601890920190819052815191955093508392850191508083835b60208310610f865780518252601f199092019160209182019101610f67565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015610fc5573d6000803e3d6000fd5b5050506040513d6020811015610fda57600080fd5b50519250505090565b6009546040516001600160a01b03909116904780156108fc02916000818181858888f1935050505015801561101c573d6000803e3d6000fd5b50565b60408051600880825281830190925260609160208201818036833701905050905060c082901b8060071a60f81b8260008151811061105957fe5b60200101906001600160f81b031916908160001a9053508060061a60f81b8260018151811061108457fe5b60200101906001600160f81b031916908160001a9053508060051a60f81b826002815181106110af57fe5b60200101906001600160f81b031916908160001a9053508060041a60f81b826003815181106110da57fe5b60200101906001600160f81b031916908160001a9053508060031a60f81b8260048151811061110557fe5b60200101906001600160f81b031916908160001a9053508060021a60f81b8260058151811061113057fe5b60200101906001600160f81b031916908160001a9053508060011a60f81b8260068151811061115b57fe5b60200101906001600160f81b031916908160001a9053508060001a60f81b8260078151811061118657fe5b60200101906001600160f81b031916908160001a90535050919050565b600080858511156111b2578182fd5b838611156111be578182fd5b505082019391909203915056fe4465706f736974436f6e74726163743a206d65726b6c6520747265652066756c6c4465706f736974436f6e74726163743a207265636f6e7374727563746564204465706f7369744461746120646f6573206e6f74206d6174636820737570706c696564206465706f7369745f646174615f726f6f744465706f736974436f6e74726163743a20696e76616c6964207769746864726177616c5f63726564656e7469616c73206c656e6774684465706f736974436f6e74726163743a206465706f7369742076616c7565206e6f74206d756c7469706c65206f6620677765694465706f736974436f6e74726163743a20696e76616c6964207075626b6579206c656e6774684465706f736974436f6e74726163743a206465706f7369742076616c756520746f6f20686967684465706f736974436f6e74726163743a206465706f7369742076616c756520746f6f206c6f774465706f736974436f6e74726163743a20696e76616c6964207369676e6174757265206c656e677468a264697066735822122006725406dc03dedf8083d50f1aa82beff11aaea76590a0bbff13f9a35de1a50d64736f6c634300060b0033",
  "deployedBytecode": "0x60806040526004361061004a5760003560e01c806301ffc9a71461004f5780632289511814610097578063621fd130146101ad578063c5f2892f14610237578063e9be02aa1461025e575b600080fd5b34801561005b57600080fd5b506100836004803603602081101561007257600080fd5b50356001600160e01b031916610273565b604080519115158252519081900360200190f35b6101ab600480360360808110156100ad57600080fd5b8101906020810181356401000000008111156100c857600080fd5b8201836020820111156100da57600080fd5b803590602001918460018302840111640100000000831117156100fc57600080fd5b91939092909160208101903564010000000081111561011a57600080fd5b82018360208201111561012c57600080fd5b8035906020019184600183028401116401000000008311171561014e57600080fd5b91939092909160208101903564010000000081111561016c57600080fd5b82018360208201111561017e57600080fd5b803590602001918460018302840111640100000000831117156101a057600080fd5b9193509150356102aa565b005b3480156101b957600080fd5b506101c2610d03565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101fc5781810151838201526020016101e4565b50505050905090810190601f1680156102295780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561024357600080fd5b5061024c610d15565b60408051918252519081900360200190f35b34801561026a57600080fd5b506101ab610fe3565b60006001600160e01b031982166301ffc9a760e01b14806102a457506001600160e01b03198216638564090760e01b145b92915050565b603086146102e95760405162461bcd60e51b81526004018080602001828103825260268152602001806112aa6026913960400191505060405180910390fd5b602084146103285760405162461bcd60e51b81526004018080602001828103825260368152602001806112416036913960400191505060405180910390fd5b606082146103675760405162461bcd60e51b815260040180806020018281038252602981526020018061131d6029913960400191505060405180910390fd5b670de0b6b3a76400003410156103ae5760405162461bcd60e51b81526004018080602001828103825260268152602001806112f76026913960400191505060405180910390fd5b633b9aca003406156103f15760405162461bcd60e51b81526004018080602001828103825260338152602001806112776033913960400191505060405180910390fd5b633b9aca00340467ffffffffffffffff81111561043f5760405162461bcd60e51b81526004018080602001828103825260278152602001806112d06027913960400191505060405180910390fd5b606061044a8261101f565b90507f649bbc62d0e31342afea4e5cd82d4049e7e1ee912fc0889aa790803be39038c589898989858a8a61047f60045461101f565b6040805160a0808252810189905290819060208201908201606083016080840160c085018e8e80828437600083820152601f01601f191690910187810386528c815260200190508c8c808284376000838201819052601f909101601f191690920188810386528c5181528c51602091820193918e019250908190849084905b838110156105165781810151838201526020016104fe565b50505050905090810190601f1680156105435780820380516001836020036101000a031916815260200191505b5086810383528881526020018989808284376000838201819052601f909101601f19169092018881038452895181528951602091820193918b019250908190849084905b8381101561059f578181015183820152602001610587565b50505050905090810190601f1680156105cc5780820380516001836020036101000a031916815260200191505b509d505050505050505050505050505060405180910390a1600060028a8a600060801b604051602001808484808284376fffffffffffffffffffffffffffffffff199094169190930190815260408051600f19818403018152601090920190819052815191955093508392506020850191508083835b602083106106615780518252601f199092019160209182019101610642565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa1580156106a0573d6000803e3d6000fd5b5050506040513d60208110156106b557600080fd5b5051905060006002806106cb6040848a8c6111a3565b6040516020018083838082843780830192505050925050506040516020818303038152906040526040518082805190602001908083835b602083106107215780518252601f199092019160209182019101610702565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015610760573d6000803e3d6000fd5b5050506040513d602081101561077557600080fd5b50516002610786896040818d6111a3565b60405160009060200180848480828437919091019283525050604080518083038152602092830191829052805190945090925082918401908083835b602083106107e15780518252601f1990920191602091820191016107c2565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015610820573d6000803e3d6000fd5b5050506040513d602081101561083557600080fd5b5051604080516020818101949094528082019290925280518083038201815260609092019081905281519192909182918401908083835b6020831061088b5780518252601f19909201916020918201910161086c565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa1580156108ca573d6000803e3d6000fd5b5050506040513d60208110156108df57600080fd5b50516040805160208101858152929350600092600292839287928f928f92018383808284378083019250505093505050506040516020818303038152906040526040518082805190602001908083835b6020831061094e5780518252601f19909201916020918201910161092f565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa15801561098d573d6000803e3d6000fd5b5050506040513d60208110156109a257600080fd5b50516040518651600291889160009188916020918201918291908601908083835b602083106109e25780518252601f1990920191602091820191016109c3565b6001836020036101000a0380198251168184511680821785525050505050509050018367ffffffffffffffff191667ffffffffffffffff1916815260180182815260200193505050506040516020818303038152906040526040518082805190602001908083835b60208310610a695780518252601f199092019160209182019101610a4a565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015610aa8573d6000803e3d6000fd5b5050506040513d6020811015610abd57600080fd5b5051604080516020818101949094528082019290925280518083038201815260609092019081905281519192909182918401908083835b60208310610b135780518252601f199092019160209182019101610af4565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015610b52573d6000803e3d6000fd5b5050506040513d6020811015610b6757600080fd5b50519050858114610ba95760405162461bcd60e51b81526004018080602001828103825260548152602001806111ed6054913960600191505060405180910390fd5b600454600f11610bea5760405162461bcd60e51b81526004018080602001828103825260218152602001806111cc6021913960400191505060405180910390fd5b600480546001019081905560005b6004811015610cf7578160011660011415610c2a578260008260048110610c1b57fe5b015550610cfa95505050505050565b600260008260048110610c3957fe5b01548460405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310610c915780518252601f199092019160209182019101610c72565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015610cd0573d6000803e3d6000fd5b5050506040513d6020811015610ce557600080fd5b50519250600282049150600101610bf8565b50fe5b50505050505050565b6060610d1060045461101f565b905090565b6004546000908190815b6004811015610ec6578160011660011415610df857600260008260048110610d4357fe5b01548460405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310610d9b5780518252601f199092019160209182019101610d7c565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015610dda573d6000803e3d6000fd5b5050506040513d6020811015610def57600080fd5b50519250610eb8565b60028360058360048110610e0857fe5b015460405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310610e5f5780518252601f199092019160209182019101610e40565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015610e9e573d6000803e3d6000fd5b5050506040513d6020811015610eb357600080fd5b505192505b600282049150600101610d1f565b50600282610ed560045461101f565b600060401b6040516020018084815260200183805190602001908083835b60208310610f125780518252601f199092019160209182019101610ef3565b51815160209384036101000a600019018019909216911617905267ffffffffffffffff199590951692019182525060408051808303600719018152601890920190819052815191955093508392850191508083835b60208310610f865780518252601f199092019160209182019101610f67565b51815160209384036101000a60001901801990921691161790526040519190930194509192505080830381855afa158015610fc5573d6000803e3d6000fd5b5050506040513d6020811015610fda57600080fd5b50519250505090565b6009546040516001600160a01b03909116904780156108fc02916000818181858888f1935050505015801561101c573d6000803e3d6000fd5b50565b60408051600880825281830190925260609160208201818036833701905050905060c082901b8060071a60f81b8260008151811061105957fe5b60200101906001600160f81b031916908160001a9053508060061a60f81b8260018151811061108457fe5b60200101906001600160f81b031916908160001a9053508060051a60f81b826002815181106110af57fe5b60200101906001600160f81b031916908160001a9053508060041a60f81b826003815181106110da57fe5b60200101906001600160f81b031916908160001a9053508060031a60f81b8260048151811061110557fe5b60200101906001600160f81b031916908160001a9053508060021a60f81b8260058151811061113057fe5b60200101906001600160f81b031916908160001a9053508060011a60f81b8260068151811061115b57fe5b60200101906001600160f81b031916908160001a9053508060001a60f81b8260078151811061118657fe5b60200101906001600160f81b031916908160001a90535050919050565b600080858511156111b2578182fd5b838611156111be578182fd5b505082019391909203915056fe4465706f736974436f6e74726163743a206d65726b6c6520747265652066756c6c4465706f736974436f6e74726163743a207265636f6e7374727563746564204465706f7369744461746120646f6573206e6f74206d6174636820737570706c696564206465706f7369745f646174615f726f6f744465706f736974436f6e74726163743a20696e76616c6964207769746864726177616c5f63726564656e7469616c73206c656e6774684465706f736974436f6e74726163743a206465706f7369742076616c7565206e6f74206d756c7469706c65206f6620677765694465706f736974436f6e74726163743a20696e76616c6964207075626b6579206c656e6774684465706f736974436f6e74726163743a206465706f7369742076616c756520746f6f20686967684465706f736974436f6e74726163743a206465706f7369742076616c756520746f6f206c6f774465706f736974436f6e74726163743a20696e76616c6964207369676e6174757265206c656e677468a264697066735822122006725406dc03dedf8083d50f1aa82beff11aaea76590a0bbff13f9a35de1a50d64736f6c634300060b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deposit(bytes,bytes,bytes,bytes32)": {
        "params": {
          "deposit_data_root": "The SHA-256 hash of the SSZ-encoded DepositData object. Used as a protection against malformed input.",
          "pubkey": "A BLS12-381 public key.",
          "signature": "A BLS12-381 signature.",
          "withdrawal_credentials": "Commitment to a public key for withdrawals."
        }
      },
      "get_deposit_count()": {
        "returns": {
          "_0": "The deposit count encoded as a little endian 64-bit number."
        }
      },
      "get_deposit_root()": {
        "returns": {
          "_0": "The deposit root hash."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Interface identification is specified in ERC-165. This function  uses less than 30,000 gas.",
        "params": {
          "interfaceId": "The interface identifier, as specified in ERC-165"
        },
        "returns": {
          "_0": "`true` if the contract implements `interfaceId` and  `interfaceId` is not 0xffffffff, `false` otherwise"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "DepositEvent(bytes,bytes,bytes,bytes,bytes)": {
        "notice": "A processed deposit event."
      }
    },
    "kind": "user",
    "methods": {
      "deposit(bytes,bytes,bytes,bytes32)": {
        "notice": "Submit a Phase 0 DepositData object."
      },
      "get_deposit_count()": {
        "notice": "Query the current deposit count."
      },
      "get_deposit_root()": {
        "notice": "Query the current deposit root hash."
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements an interface"
      }
    },
    "notice": "This is the Ethereum 2.0 deposit contract interface. For more information see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 68,
        "contract": "contracts/mocks/DepositContract.sol:DepositContract",
        "label": "branch",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_bytes32)4_storage"
      },
      {
        "astId": 70,
        "contract": "contracts/mocks/DepositContract.sol:DepositContract",
        "label": "deposit_count",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 74,
        "contract": "contracts/mocks/DepositContract.sol:DepositContract",
        "label": "zero_hashes",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_bytes32)4_storage"
      },
      {
        "astId": 76,
        "contract": "contracts/mocks/DepositContract.sol:DepositContract",
        "label": "owner",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)4_storage": {
        "base": "t_bytes32",
        "encoding": "inplace",
        "label": "bytes32[4]",
        "numberOfBytes": "128"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
