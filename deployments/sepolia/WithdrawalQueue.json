{
  "address": "0x93Ec5A17176336C95Bfb537A71130d6eEA6eF73D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wsgEth",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_epochLength",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IsNotPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IsPaused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PermissionDenied",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooEarly",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "OperatorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "item",
          "type": "uint16"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "RedeemRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "item",
          "type": "uint16"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GOV",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WSGETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balanceOfSelf",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountToWithdraw",
          "type": "uint256"
        }
      ],
      "name": "_checkWithdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "withdrawalAllowed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balanceOfSelf",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountToWithdraw",
          "type": "uint256"
        }
      ],
      "name": "_isWithdrawalAllowed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "claimableRedeemRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "pendingRedeemRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "redeemRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "requestRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setEpochLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "func",
          "type": "uint16"
        }
      ],
      "name": "togglePause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssetsOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userEntries",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blocknum",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x7f49538195ad726a17c61beef02bbb32f4570862e7a071df7eb2441db627b919",
  "receipt": {
    "to": null,
    "from": "0xA120FAd0498ECbF755a675E3833158484123bF30",
    "contractAddress": "0x93Ec5A17176336C95Bfb537A71130d6eEA6eF73D",
    "transactionIndex": 88,
    "gasUsed": "1512469",
    "logsBloom": "0x
    "blockHash": "0xf49449654e6db27093b8521690a7708f9862c68a0ebb2ea71a7f144e7cf52e55",
    "transactionHash": "0x7f49538195ad726a17c61beef02bbb32f4570862e7a071df7eb2441db627b919",
    "logs": [
      {
        "transactionIndex": 88,
        "blockNumber": 6233357,
        "transactionHash": "0x7f49538195ad726a17c61beef02bbb32f4570862e7a071df7eb2441db627b919",
        "address": "0x514dfd2d10eC6775f030BA2abcf7A2445C0CA6Fb",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000093ec5a17176336c95bfb537a71130d6eea6ef73d",
          "0x00000000000000000000000036c2f00cc7d02be7df0bc9be2a8e08b74c4f2e56"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 155,
        "blockHash": "0xf49449654e6db27093b8521690a7708f9862c68a0ebb2ea71a7f144e7cf52e55"
      },
      {
        "transactionIndex": 88,
        "blockNumber": 6233357,
        "transactionHash": "0x7f49538195ad726a17c61beef02bbb32f4570862e7a071df7eb2441db627b919",
        "address": "0x93Ec5A17176336C95Bfb537A71130d6eEA6eF73D",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x8eeeb5290718f324aa0965d35cf24b6163c00698ab277824ce00bdf229264ecf",
          "0x000000000000000000000000a120fad0498ecbf755a675e3833158484123bf30",
          "0x000000000000000000000000a120fad0498ecbf755a675e3833158484123bf30"
        ],
        "data": "0x",
        "logIndex": 156,
        "blockHash": "0xf49449654e6db27093b8521690a7708f9862c68a0ebb2ea71a7f144e7cf52e55"
      }
    ],
    "blockNumber": 6233357,
    "cumulativeGasUsed": "16813131",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x36c2F00cC7D02be7Df0BC9be2a8e08b74C4f2E56", "0x514dfd2d10eC6775f030BA2abcf7A2445C0CA6Fb", 1],
  "numDeployments": 1,
  "solcInputHash": "b098c02b927c81fd02abb8247583d190",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wsgEth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_epochLength\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IsNotPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IsPaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PermissionDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooEarly\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"OperatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"item\",\"type\":\"uint16\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"RedeemRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"item\",\"type\":\"uint16\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOV\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WSGETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOfSelf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"_checkWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"withdrawalAllowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balanceOfSelf\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"_isWithdrawalAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"claimableRedeemRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"pendingRedeemRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redeemRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"requestRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setEpochLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"func\",\"type\":\"uint16\"}],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssetsOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userEntries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blocknum\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"@ChimeraDefi - chimera_defi@protonmail.com | sharedstake.org\",\"details\":\"- ERC-7540 inspired withdrawal contract This contract is designed to be used with SharedDepositMinterV2 contract As a module extension that adds 7540 methods requestRedeem and redeem Example flow -> user calls requestRedeem(user, user, userShares) user calls setOperator(admin OR protocol provided keeper, true) admin can now call redeem on the users behalf if needed after epoch user calls redeem(user, user, userShares) after waiting for epoch Caveats: If the user requests another redemption, before fulfillment, this resets the epoch length clock for their request Basic upgrade path: 1. Call togglePause(1), this disables the requestRedeem fn so no new requests 2. Deploy new contract, direct users to it 3. Fulfill any remaining redeemRequests i.e. totalPendingRequest, for all RedeemRequest events from requestsFulfilled to requestsCreated\",\"events\":{\"Paused(address,uint16)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address,uint16)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"WithdrawalQueue\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/v2/core/WithdrawalQueue.sol\":\"WithdrawalQueue\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x5a173dcd1c1f0074e4df6a9cdab3257e17f2e64f7b8f30ca9e17a8c5ea250e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/v2/core/SharedDepositMinterV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title SharedDepositMinterV2 - minter for ETH LSD\\n/// @author @ChimeraDefi - chimera_defi@protonmail.com | sharedstake.org\\n// v1 sharedstake veth2 minter with some code removed\\n// user deposits eth to get minted token\\n// The contract cannot move user ETH outside unless\\n// 1. the user redeems 1:1\\n// 2. the depositToEth2 or depositToEth2Batch fns are called which allow moving ETH to the mainnet deposit contract only\\n// 3. The contract allows permissioned external actors to supply validator public keys\\n// 4. Who's allowed to deposit how many validators is governed outside this contract\\n// 5. The ability to provision validators for user ETH is portioned out by the DAO\\n\\n// Changes\\n/**\\n- Custom errors instead of revert strings\\n- Granular management via AccessControl with GOV and NOR roles. Node operator can only deploy validators\\n- Refactored to allow users to specify destination address for fns - for zaps\\n- Added deposit+stake/unstake+withdraw combo convenience routes\\n- Refactored fee calc out to external contract\\n*/\\nimport {IFeeCalc} from \\\"../interfaces/IFeeCalc.sol\\\";\\nimport {IERC20MintableBurnable} from \\\"../interfaces/IERC20MintableBurnable.sol\\\";\\nimport {IERC4626} from \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\n\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {Pausable} from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport {ETH2DepositWithdrawalCredentials} from \\\"../lib/ETH2DepositWithdrawalCredentials.sol\\\";\\n\\n/// @title SharedDepositMinterV2\\n/// @author ChimeraDefi - chimera_defi@protonmail.com | sharedstake.org\\n/// @notice Mints LSD tokens for ETH deposited to the contract. Handles the depositing of ETH to the ETH2 deposit contract and validator creation\\n/// @dev Deployment params: \\n/// - addresses : [feeCalc, sgeth, wsgeth, gov]\\ncontract SharedDepositMinterV2 is AccessControl, Pausable, ReentrancyGuard, ETH2DepositWithdrawalCredentials {\\n    /* ========== STATE VARIABLES ========== */\\n    uint256 public adminFee;\\n    uint256 public numValidators;\\n    uint256 public costPerValidator;\\n\\n    // The validator shares created by this shared stake contract. 1 share costs >= 1 eth\\n    uint256 public curValidatorShares; //initialized to 0\\n\\n    // The number of times the deposit to eth2 contract has been called to create validators\\n    uint256 public validatorsCreated; //initialized to 0\\n\\n    // Total accrued admin fee\\n    uint256 public adminFeeTotal; //initialized to 0\\n\\n    // Its hard to exactly hit the max deposit amount with small shares. this allows a small bit of overflow room\\n    // Eth in the buffer cannot be withdrawn by an admin, only by burning the underlying token via a user withdraw\\n    uint256 public buffer;\\n\\n    // Flash loan tokenomic protection in case of changes in admin fee with future lots\\n    bool public refundFeesOnWithdraw; //initialized to false\\n\\n    // NEW\\n    IERC20MintableBurnable private immutable _SGETH;\\n    IERC4626 private immutable _WSGETH;\\n    IFeeCalc private _feeCalc;\\n\\n    bytes32 public constant NOR = keccak256(\\\"NOR\\\"); // Node operator for deploying validators\\n    bytes32 public constant GOV = keccak256(\\\"GOV\\\"); // Governance for settings - normally timelock controlled by multisig\\n\\n    //errors\\n    error AmountTooHigh();\\n    error NoValidators();\\n\\n    constructor(\\n        uint256 _numValidators,\\n        uint256 _adminFee,\\n        address[] memory addresses\\n    ) AccessControl() Pausable() ReentrancyGuard() ETH2DepositWithdrawalCredentials(addresses[4]) {\\n        _feeCalc = IFeeCalc(addresses[0]);\\n        _SGETH = IERC20MintableBurnable(addresses[1]);\\n        _WSGETH = IERC4626(addresses[2]);\\n\\n        _SGETH.approve(address(_WSGETH), 2 ** 256 - 1); // max approve wsgeth for deposit and stake\\n\\n        adminFee = _adminFee; // Admin and infra fees\\n        numValidators = _numValidators; // The number of validators to create in this lot. Sets a max limit on deposits\\n\\n        // Eth in the buffer cannot be withdrawn by an admin, only by burning the underlying token\\n        buffer = 10 * 1e18; // roughly equal to 10 eth.\\n\\n        costPerValidator = (32 * 1e18) + adminFee;\\n\\n        _grantRole(NOR, msg.sender);\\n        _grantRole(GOV, addresses[3]); // deployer will need it to set withdrawal creds. since the non-custodial withdrawal path depends on the minter.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        DEPOSIT/WITHDRAWAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    // USER INTERACTIONS\\n    /*\\n        Shares minted = Z\\n        Principal deposit input = P\\n        AdminFee = a\\n        costPerValidator = 32 + a\\n        AdminFee as percent in 1e18 = a% =  (a / costPerValidator) * 1e18\\n        AdminFee on tx in 1e18 = (P * a% / 1e18)\\n\\n        on deposit:\\n        P - (P * a%) = Z\\n\\n        on withdraw with admin fee refund:\\n        P = Z / (1 - a%)\\n        P = Z - Z*a%\\n    */\\n\\n    function deposit() external payable {\\n        _deposit(msg.sender);\\n    }\\n\\n    function depositFor(address dest) external payable {\\n        _deposit(dest);\\n    }\\n\\n    function depositAndStake() external payable {\\n        _WSGETH.deposit(_deposit(address(this)), msg.sender);\\n    }\\n\\n    function depositAndStakeFor(address dest) external payable {\\n        _WSGETH.deposit(_deposit(address(this)), dest);\\n    }\\n\\n    function withdraw(uint256 amount) external {\\n        _withdraw(amount, msg.sender, msg.sender);\\n    }\\n\\n    function withdrawTo(uint256 amount, address dest) external {\\n        _withdraw(amount, msg.sender, dest);\\n    }\\n\\n    function unstakeAndWithdraw(uint256 amount, address dest) external {\\n        _withdraw(_WSGETH.redeem(amount, address(this), msg.sender), address(this), dest);\\n    }\\n\\n    // migration function to accept old monies and copy over state\\n    // users should not use this as it just donates the money without minting veth or tracking donations\\n    function donate() external payable {} // solhint-disable-line\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ADMIN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    // Batch deposit eth to the eth2 contract with preset creds\\n    // Data needs to be verified offchain to save gas\\n    function batchDepositToEth2(\\n        bytes[] calldata pubkeys,\\n        bytes[] calldata signatures,\\n        bytes32[] calldata depositDataRoots\\n    ) external onlyRole(NOR) {\\n        if (address(this).balance < (_depositAmount * pubkeys.length)) {\\n            revert AmountTooHigh(); // Not enough bal in contract to deploy all validators\\n        }\\n        _batchDeposit(pubkeys, signatures, depositDataRoots);\\n        validatorsCreated = validatorsCreated + pubkeys.length;\\n    }\\n\\n    function setWithdrawalCredential(bytes memory _newWithdrawalCreds) external onlyRole(NOR) {\\n        // can only be called once\\n        _setWithdrawalCredential(_newWithdrawalCreds);\\n    }\\n\\n    // Slashes the onchain staked sgETH to mirror CL validator slashings\\n    // modifies wsgeth virtual price\\n    function slash(uint256 amt) external onlyRole(GOV) {\\n        if (amt > curValidatorShares) {\\n            revert AmountTooHigh(); // Cannot slash more than minted\\n        }\\n        _SGETH.burn(address(_WSGETH), amt);\\n    }\\n\\n    // Set fee calc address. if addr = 0 then fees are assumed to be 0\\n    function setFeeCalc(address _feeCalculatorAddr) external onlyRole(GOV) {\\n        _feeCalc = IFeeCalc(_feeCalculatorAddr);\\n    }\\n\\n    function togglePause() external onlyRole(GOV) {\\n        bool paused = paused();\\n        if (paused) {\\n            _unpause();\\n        } else {\\n            _pause();\\n        }\\n    }\\n\\n    // Used to migrate state over to new contract\\n    function migrateShares(uint256 shares) external onlyRole(GOV) {\\n        curValidatorShares = shares;\\n    }\\n\\n    function toggleWithdrawRefund() external onlyRole(GOV) {\\n        refundFeesOnWithdraw = !refundFeesOnWithdraw;\\n    }\\n\\n    function setNumValidators(uint256 _numValidators) external onlyRole(GOV) {\\n        if (_numValidators > 0) {\\n            numValidators = _numValidators;\\n        } else {\\n            revert NoValidators();\\n        }\\n    }\\n\\n    function withdrawAdminFee(uint256 amount) external onlyRole(GOV) {\\n        address payable sender = payable(msg.sender);\\n        if (amount == 0) {\\n            amount = adminFeeTotal;\\n        }\\n        if (amount > adminFeeTotal) {\\n            revert AmountTooHigh();\\n        }\\n        adminFeeTotal = adminFeeTotal - amount;\\n        Address.sendValue(sender, amount);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ACCOUNTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function remainingSpaceInEpoch() external view returns (uint256) {\\n        // Helpful view function to gauge how much the user can send to the contract when it is near full\\n        uint256 remainingShares = maxValidatorShares() - curValidatorShares;\\n        uint256 valBeforeAdmin = (remainingShares * 1e18) / (((1 * 1e18) - (adminFee * 1e18) / costPerValidator));\\n        return valBeforeAdmin;\\n    }\\n\\n    function maxValidatorShares() public view returns (uint256) {\\n        return 32 * 1e18 * numValidators;\\n    }\\n\\n    function _depositAccounting() internal returns (uint256 value) {\\n        // input is whole, not / 1e18 , i.e. in 1 = 1 eth send when from etherscan\\n        value = msg.value;\\n        uint256 fee;\\n\\n        if (address(_feeCalc) != address(0)) {\\n            (value, fee) = _feeCalc.processDeposit(value, msg.sender);\\n            adminFeeTotal = adminFeeTotal + fee;\\n        }\\n\\n        uint256 newShareTotal = curValidatorShares + value;\\n\\n        if (newShareTotal > buffer + maxValidatorShares()) {\\n            revert AmountTooHigh();\\n        }\\n        curValidatorShares = newShareTotal;\\n    }\\n\\n    function _withdrawAccounting(uint256 amount) internal returns (uint256) {\\n        uint256 fee;\\n        if (address(_feeCalc) != address(0)) {\\n            (amount, fee) = _feeCalc.processWithdraw(amount, msg.sender);\\n            if (refundFeesOnWithdraw) {\\n                adminFeeTotal = adminFeeTotal - fee;\\n            } else {\\n                adminFeeTotal = adminFeeTotal + fee;\\n            }\\n        }\\n        if (address(this).balance < (amount + adminFeeTotal)) {\\n            revert AmountTooHigh();\\n        }\\n\\n        curValidatorShares = curValidatorShares - amount;\\n        return amount;\\n    }\\n\\n    function _deposit(address dest) internal nonReentrant whenNotPaused returns (uint256 amt) {\\n        amt = _depositAccounting();\\n        _SGETH.mint(dest, amt);\\n    }\\n\\n    function _withdraw(uint256 amount, address origin, address dest) internal nonReentrant whenNotPaused {\\n        _SGETH.burn(origin, amount); // reverts if amount is too high\\n        uint256 assets = _withdrawAccounting(amount);\\n\\n        address payable recv = payable(dest);\\n        Address.sendValue(recv, assets);\\n    }\\n\\n    receive() external payable {} // solhint-disable-line\\n\\n    fallback() external payable {} // solhint-disable-line\\n}\\n\",\"keccak256\":\"0x1ad67e5f7bb03182702d6d249923c1e2c89d84e8071b537814e1f6c79ee7279d\",\"license\":\"BUSL-1.1\"},\"contracts/v2/core/WithdrawalQueue.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.20;\\n\\nimport {IERC4626} from \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport {FIFOQueue} from \\\"../lib/FIFOQueue.sol\\\";\\nimport {Errors} from \\\"../lib/Errors.sol\\\";\\nimport {OperatorSettable} from \\\"../lib/OperatorSettable.sol\\\";\\nimport {GranularPause} from \\\"../lib/GranularPause.sol\\\";\\nimport {SharedDepositMinterV2} from \\\"./SharedDepositMinterV2.sol\\\";\\n\\n/**\\n * @title WithdrawalQueue\\n * @author @ChimeraDefi - chimera_defi@protonmail.com | sharedstake.org\\n * @dev -\\n * ERC-7540 inspired withdrawal contract\\n * This contract is designed to be used with SharedDepositMinterV2 contract\\n * As a module extension that adds 7540 methods requestRedeem and redeem\\n * Example flow ->\\n * user calls requestRedeem(user, user, userShares)\\n * user calls setOperator(admin OR protocol provided keeper, true)\\n * admin can now call redeem on the users behalf if needed after epoch\\n * user calls redeem(user, user, userShares) after waiting for epoch\\n * Caveats:\\n * If the user requests another redemption, before fulfillment,\\n * this resets the epoch length clock for their request\\n * Basic upgrade path:\\n * 1. Call togglePause(1), this disables the requestRedeem fn so no new requests\\n * 2. Deploy new contract, direct users to it\\n * 3. Fulfill any remaining redeemRequests i.e. totalPendingRequest,\\n * for all RedeemRequest events from requestsFulfilled to requestsCreated\\n */\\ncontract WithdrawalQueue is AccessControl, ReentrancyGuard, GranularPause, FIFOQueue, OperatorSettable {\\n    using Address for address payable;\\n\\n    struct Request {\\n        address requester;\\n        uint256 shares;\\n    }\\n    // SharedDepositMinterV2 public immutable MINTER;\\n    address public immutable MINTER;\\n    address public immutable WSGETH;\\n\\n    uint256 internal totalPendingRequest;\\n    uint256 internal requestsCreated;\\n    uint256 internal requestsFulfilled;\\n    uint256 public totalAssetsOut;\\n\\n    bytes32 public constant GOV = keccak256(\\\"GOV\\\"); // Governance for settings - normally timelock controlled by multisig\\n\\n    mapping(uint256 => Request) internal requests;\\n    mapping(address => uint256) public redeemRequests;\\n\\n    event RedeemRequest(\\n        address indexed requester,\\n        address indexed owner,\\n        uint256 indexed requestId,\\n        address operator,\\n        uint256 assets\\n    );\\n    event Redeem(address indexed requester, address indexed receiver, uint256 shares, uint256 assets);\\n\\n    constructor(address _minter, address _wsgEth, uint256 _epochLength) FIFOQueue(_epochLength) {\\n        MINTER = _minter;\\n        WSGETH = _wsgEth;\\n\\n        uint256 maxUint256 = 2 ** 256 - 1;\\n\\n        IERC20(WSGETH).approve(_minter, maxUint256);\\n\\n        _grantRole(GOV, msg.sender);\\n    }\\n\\n    function requestRedeem(\\n        uint256 shares,\\n        address requester,\\n        address owner\\n    ) external onlyOwnerOrOperator(owner) nonReentrant whenNotPaused(uint16(1)) returns (uint256 requestId) {\\n        if (shares == 0) {\\n            revert Errors.InvalidAmount();\\n        }\\n        IERC20(WSGETH).transferFrom(owner, address(this), shares); // asset here is the Vault underlying asset\\n\\n        requestId = requestsCreated++;\\n        requests[requestId] = Request({requester: requester, shares: shares});\\n        // use assets for tracking\\n        uint256 assets = IERC4626(WSGETH).previewRedeem(shares);\\n\\n        _stakeForWithdrawal(owner, assets);\\n        totalPendingRequest += assets;\\n        redeemRequests[requester] += assets; // underflow would revert if not enough claimable shares\\n\\n        emit RedeemRequest(requester, owner, requestId, msg.sender, shares);\\n    }\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address requester\\n    ) external onlyOwnerOrOperator(requester) nonReentrant whenNotPaused(uint16(2)) returns (uint256 assets) {\\n        if (shares == 0) {\\n            revert Errors.InvalidAmount();\\n        }\\n\\n        assets = IERC4626(WSGETH).previewRedeem(shares);\\n\\n        // checks if we have enough assets to fulfill the request and if epoch has passed\\n        if (claimableRedeemRequest(requester) < assets) {\\n            _checkWithdraw(requester, totalBalance(), assets);\\n            return 0; // should never happen. previous fn will generate a rich error\\n        }\\n\\n        _withdraw(requester, assets);\\n        // Treat everything as claimableRedeemRequest and validate here if there's adequate funds\\n        redeemRequests[requester] -= assets; // underflow would revert if not enough claimable shares\\n        totalPendingRequest -= assets;\\n        // Track total returned\\n        totalAssetsOut += assets;\\n        requestsFulfilled++;\\n\\n        uint256 minterBalance = MINTER.balance;\\n        // This feels suboptimal, but is the easiest way to always burn the token on redemptions\\n        if (assets > minterBalance) {\\n            uint256 diff = assets - minterBalance;\\n            // We need to use donate/transfer etc. cant deposit and mint more shares as that messes up accouting\\n            payable(MINTER).transfer(diff);\\n        }\\n\\n        // Always burn redeemed tokens\\n        SharedDepositMinterV2(payable(MINTER)).unstakeAndWithdraw(shares, receiver);\\n\\n        emit Redeem(requester, receiver, shares, assets);\\n    }\\n\\n    function togglePause(uint16 func) external onlyRole(GOV) {\\n        bool paused = paused[func];\\n        if (paused) {\\n            _unpause(func);\\n        } else {\\n            _pause(func);\\n        }\\n    }\\n\\n    function setEpochLength(uint256 value) external onlyRole(GOV) {\\n        _setEpochLength(value);\\n    }\\n\\n    function pendingRedeemRequest(address owner) public view returns (uint256 shares) {\\n        return redeemRequests[owner];\\n    }\\n\\n    // claimableRedeemRequest - returns owners shares in claimable state,\\n    // i.e. epoch has elapsed and sufficient funds exist\\n    function claimableRedeemRequest(address owner) public view returns (uint256 shares) {\\n        if (redeemRequests[owner] > 0 && _isWithdrawalAllowed(owner, totalBalance(), redeemRequests[owner])) {\\n            return redeemRequests[owner];\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function totalBalance() internal view returns (uint256) {\\n        return address(this).balance + MINTER.balance;\\n    }\\n\\n    receive() external payable {} // solhint-disable-line\\n\\n    fallback() external payable {} // solhint-disable-line\\n}\\n\",\"keccak256\":\"0xcc9b4c773b330c1942e0cac4b96809316c2e68ceb3d49a146cb4747e88afb320\",\"license\":\"BUSL-1.1\"},\"contracts/v2/interfaces/IDepositContract.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\n// \\u250f\\u2501\\u2501\\u2501\\u2513\\u2501\\u250f\\u2513\\u2501\\u250f\\u2513\\u2501\\u2501\\u250f\\u2501\\u2501\\u2501\\u2513\\u2501\\u2501\\u250f\\u2501\\u2501\\u2501\\u2513\\u2501\\u2501\\u2501\\u2501\\u250f\\u2501\\u2501\\u2501\\u2513\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u250f\\u2513\\u2501\\u2501\\u2501\\u2501\\u2501\\u250f\\u2501\\u2501\\u2501\\u2513\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u250f\\u2513\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u250f\\u2513\\u2501\\n// \\u2503\\u250f\\u2501\\u2501\\u251b\\u250f\\u251b\\u2517\\u2513\\u2503\\u2503\\u2501\\u2501\\u2503\\u250f\\u2501\\u2513\\u2503\\u2501\\u2501\\u2503\\u250f\\u2501\\u2513\\u2503\\u2501\\u2501\\u2501\\u2501\\u2517\\u2513\\u250f\\u2513\\u2503\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u250f\\u251b\\u2517\\u2513\\u2501\\u2501\\u2501\\u2501\\u2503\\u250f\\u2501\\u2513\\u2503\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u250f\\u251b\\u2517\\u2513\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u250f\\u251b\\u2517\\u2513\\n// \\u2503\\u2517\\u2501\\u2501\\u2513\\u2517\\u2513\\u250f\\u251b\\u2503\\u2517\\u2501\\u2513\\u2517\\u251b\\u250f\\u251b\\u2503\\u2501\\u2501\\u2503\\u2503\\u2501\\u2503\\u2503\\u2501\\u2501\\u2501\\u2501\\u2501\\u2503\\u2503\\u2503\\u2503\\u250f\\u2501\\u2501\\u2513\\u250f\\u2501\\u2501\\u2513\\u250f\\u2501\\u2501\\u2513\\u250f\\u2501\\u2501\\u2513\\u250f\\u2513\\u2517\\u2513\\u250f\\u251b\\u2501\\u2501\\u2501\\u2501\\u2503\\u2503\\u2501\\u2517\\u251b\\u250f\\u2501\\u2501\\u2513\\u250f\\u2501\\u2513\\u2501\\u2517\\u2513\\u250f\\u251b\\u250f\\u2501\\u2513\\u250f\\u2501\\u2501\\u2513\\u2501\\u250f\\u2501\\u2501\\u2513\\u2517\\u2513\\u250f\\u251b\\n// \\u2503\\u250f\\u2501\\u2501\\u251b\\u2501\\u2503\\u2503\\u2501\\u2503\\u250f\\u2513\\u2503\\u250f\\u2501\\u251b\\u250f\\u251b\\u2501\\u2501\\u2503\\u2503\\u2501\\u2503\\u2503\\u2501\\u2501\\u2501\\u2501\\u2501\\u2503\\u2503\\u2503\\u2503\\u2503\\u250f\\u2513\\u2503\\u2503\\u250f\\u2513\\u2503\\u2503\\u250f\\u2513\\u2503\\u2503\\u2501\\u2501\\u252b\\u2523\\u252b\\u2501\\u2503\\u2503\\u2501\\u2501\\u2501\\u2501\\u2501\\u2503\\u2503\\u2501\\u250f\\u2513\\u2503\\u250f\\u2513\\u2503\\u2503\\u250f\\u2513\\u2513\\u2501\\u2503\\u2503\\u2501\\u2503\\u250f\\u251b\\u2517\\u2501\\u2513\\u2503\\u2501\\u2503\\u250f\\u2501\\u251b\\u2501\\u2503\\u2503\\u2501\\n// \\u2503\\u2517\\u2501\\u2501\\u2513\\u2501\\u2503\\u2517\\u2513\\u2503\\u2503\\u2503\\u2503\\u2503\\u2503\\u2517\\u2501\\u2513\\u250f\\u2513\\u2503\\u2517\\u2501\\u251b\\u2503\\u2501\\u2501\\u2501\\u2501\\u250f\\u251b\\u2517\\u251b\\u2503\\u2503\\u2503\\u2501\\u252b\\u2503\\u2517\\u251b\\u2503\\u2503\\u2517\\u251b\\u2503\\u2523\\u2501\\u2501\\u2503\\u2503\\u2503\\u2501\\u2503\\u2517\\u2513\\u2501\\u2501\\u2501\\u2501\\u2503\\u2517\\u2501\\u251b\\u2503\\u2503\\u2517\\u251b\\u2503\\u2503\\u2503\\u2503\\u2503\\u2501\\u2503\\u2517\\u2513\\u2503\\u2503\\u2501\\u2503\\u2517\\u251b\\u2517\\u2513\\u2503\\u2517\\u2501\\u2513\\u2501\\u2503\\u2517\\u2513\\n// \\u2517\\u2501\\u2501\\u2501\\u251b\\u2501\\u2517\\u2501\\u251b\\u2517\\u251b\\u2517\\u251b\\u2517\\u2501\\u2501\\u2501\\u251b\\u2517\\u251b\\u2517\\u2501\\u2501\\u2501\\u251b\\u2501\\u2501\\u2501\\u2501\\u2517\\u2501\\u2501\\u2501\\u251b\\u2517\\u2501\\u2501\\u251b\\u2503\\u250f\\u2501\\u251b\\u2517\\u2501\\u2501\\u251b\\u2517\\u2501\\u2501\\u251b\\u2517\\u251b\\u2501\\u2517\\u2501\\u251b\\u2501\\u2501\\u2501\\u2501\\u2517\\u2501\\u2501\\u2501\\u251b\\u2517\\u2501\\u2501\\u251b\\u2517\\u251b\\u2517\\u251b\\u2501\\u2517\\u2501\\u251b\\u2517\\u251b\\u2501\\u2517\\u2501\\u2501\\u2501\\u251b\\u2517\\u2501\\u2501\\u251b\\u2501\\u2517\\u2501\\u251b\\n// \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2503\\u2503\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n// \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2517\\u251b\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n\\n// SPDX-License-Identifier: CC0-1.0\\n\\n// This interface is designed to be compatible with the Vyper version.\\n/// @notice This is the Ethereum 2.0 deposit contract interface.\\n/// For more information see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs\\ninterface IDepositContract {\\n    /// @notice A processed deposit event.\\n    event DepositEvent(bytes pubkey, bytes withdrawal_credentials, bytes amount, bytes signature, bytes index);\\n\\n    /// @notice Submit a Phase 0 DepositData object.\\n    /// @param pubkey A BLS12-381 public key.\\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\\n    /// @param signature A BLS12-381 signature.\\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\\n    /// Used as a protection against malformed input.\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable;\\n\\n    /// @notice Query the current deposit root hash.\\n    /// @return The deposit root hash.\\n    function get_deposit_root() external view returns (bytes32);\\n\\n    /// @notice Query the current deposit count.\\n    /// @return The deposit count encoded as a little endian 64-bit number.\\n    function get_deposit_count() external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xe2089e69dbf1fb4940e4dffcdb10524418a40b6e9529b72cb83f2e921fb08e3f\",\"license\":\"CC0-1.0\"},\"contracts/v2/interfaces/IERC20MintableBurnable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IERC20MintableBurnable {\\n    function mintingAllowedAfter() external view returns (uint256);\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 rawAmount) external returns (bool);\\n\\n    /**\\n     * @notice Triggers an approval from owner to spends\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 rawAmount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 rawAmount) external returns (bool);\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 rawAmount) external returns (bool);\\n\\n    /**\\n     * @notice Mint new tokens\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to be minted\\n     */\\n    function mint(address dst, uint256 rawAmount) external;\\n\\n    function burn(address src, uint256 rawAmount) external;\\n    function setMinter(address minter_) external;\\n}\\n\",\"keccak256\":\"0x2fcd50fd565019546be3412013205df119fe96fdca5bb152229b70fb4ec1169b\",\"license\":\"UNLICENSED\"},\"contracts/v2/interfaces/IFeeCalc.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IFeeCalc {\\n    function processDeposit(uint256 amt, address who) external view returns (uint256, uint256);\\n\\n    function processWithdraw(uint256 amt, address who) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x2391271eeaf9baaa39edf4dc69b057824db52b0b87474680ca0b71c25a6b0550\",\"license\":\"UNLICENSED\"},\"contracts/v2/lib/ETH2DepositWithdrawalCredentials.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.20;\\n\\nimport {IDepositContract} from \\\"../interfaces/IDepositContract.sol\\\";\\n\\n/// @title  A contract for holding a eth2 validator withrawal pubkey\\n/// @author @chimeraDefi\\n/// @notice A contract for holding a eth2 validator withrawal pubkey\\n/// @dev Downstream contract needs to implement who can set the withdrawal address and set it\\ncontract ETH2DepositWithdrawalCredentials {\\n  uint256 internal constant _depositAmount = 32 ether;\\n  IDepositContract public immutable DEPOSIT_CONTRACT;\\n  bytes public withdrawalPubKey; // Pubkey for ETH 2.0 withdrawal creds\\n\\n  event WithdrawalCredentialSet(bytes _withdrawalCredential);\\n\\n  constructor(address _dc) {\\n    DEPOSIT_CONTRACT = IDepositContract(_dc);\\n  }\\n\\n  /// @notice A more streamlined variant of batch deposit for use with preset withdrawal addresses\\n  ///         Submit index-matching arrays that form Phase 0 DepositData objects.\\n  ///         Will create a deposit transaction per index of the arrays submitted.\\n  ///\\n  /// @param pubkeys - An array of BLS12-381 public keys.\\n  /// @param signatures - An array of BLS12-381 signatures.\\n  /// @param depositDataRoots - An array of the SHA-256 hash of the SSZ-encoded DepositData object.\\n  function _batchDeposit(\\n      bytes[] calldata pubkeys,\\n      bytes[] calldata signatures,\\n      bytes32[] calldata depositDataRoots\\n  ) internal {\\n    // optimizations https://ethereum.stackexchange.com/questions/113221/what-is-the-purpose-of-unchecked-in-solidity\\n    // https://medium.com/@bloqarl/solidity-gas-optimization-tips-with-assembly-you-havent-heard-yet-1381c77ff078\\n    // 30m gas / block roughly, say 10m max used so 100 validators a batch max \\n    // each deposit call costs roughly 128k https://etherscan.io/tx/0xa2acf6e6bde99b532125cc8026cd88eea345f296968ce732556945ab4705d03e\\n    uint256 i = pubkeys.length;\\n    uint256 _amt = _depositAmount;\\n    bytes memory wpk = withdrawalPubKey;\\n\\n    while (i > 0) {\\n      unchecked {\\n        // While loop check prevents underflow.\\n        // --i is cheaper than i--\\n        // reverse while loop cheapest compared to while or for \\n        // Since we set the upper loop bound to the arr len, we decr 1st to not hit out of bounds\\n        --i;\\n\\n        DEPOSIT_CONTRACT.deposit{value: _amt}(\\n          pubkeys[i],\\n          wpk,\\n          signatures[i],\\n          depositDataRoots[i]\\n        );\\n      }\\n    }\\n  }\\n\\n  /// @notice sets curr_withdrawal_pubkey to be used when deploying validators\\n  function _setWithdrawalCredential(bytes memory newPk) internal {\\n    withdrawalPubKey = newPk;\\n\\n    emit WithdrawalCredentialSet(newPk);\\n  }\\n}\\n\",\"keccak256\":\"0x0ebea7361fe05b3b8eb90b0dde098d2d93a994e54d9e498dcba951735de53a56\",\"license\":\"BUSL-1.1\"},\"contracts/v2/lib/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title Errors\\n * @author Sharedstake\\n * @notice Contains all the custom errors\\n */\\nlibrary Errors {\\n    error ZeroAddress();\\n    error InvalidAmount();\\n    error PermissionDenied();\\n    error InsufficientBalance();\\n    error TooEarly();\\n    error FailedCall();\\n}\\n\",\"keccak256\":\"0x5fd673f73b02e0db4a39a9fb8c1aeecc7e88d24cdf895cdee6a40c8e728be75a\",\"license\":\"BUSL-1.1\"},\"contracts/v2/lib/FIFOQueue.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n// Simple First in first out queue\\n// Uses a system of cascading locks based on the block number.\\n// Users need to wait a minimum of epochLength blocks before withdrawing\\n// Users past the epoch boundary can claim, allowing some time for earlier users to claim first\\nabstract contract FIFOQueue {\\n    struct UserEntry {\\n        uint256 amount;\\n        uint256 blocknum;\\n    }\\n    mapping(address => UserEntry) public userEntries;\\n\\n    uint256 public epochLength;\\n\\n    constructor(uint256 _epochLength) {\\n        epochLength = _epochLength;\\n    }\\n\\n    function _checkWithdraw(\\n        address sender,\\n        uint256 balanceOfSelf,\\n        uint256 amountToWithdraw\\n    ) public view returns (bool withdrawalAllowed) {\\n        UserEntry memory ue = userEntries[sender];\\n\\n        if (!(amountToWithdraw <= balanceOfSelf && amountToWithdraw <= ue.amount)) {\\n            revert Errors.InvalidAmount();\\n        }\\n\\n        if (!(block.number >= ue.blocknum + epochLength)) {\\n            revert Errors.TooEarly();\\n        }\\n        return true;\\n    }\\n\\n    function _isWithdrawalAllowed(\\n        address sender,\\n        uint256 balanceOfSelf,\\n        uint256 amountToWithdraw\\n    ) public view returns (bool) {\\n        UserEntry memory ue = userEntries[sender];\\n\\n        return (amountToWithdraw <= balanceOfSelf && amountToWithdraw <= ue.amount) && (block.number >= ue.blocknum + epochLength);\\n    }\\n\\n    // should be admin only or used in a constructor upstream\\n    // set epoch length in blocks\\n    function _setEpochLength(uint256 _value) internal {\\n        if (_value == 0) {\\n            revert Errors.InvalidAmount();\\n        }\\n        epochLength = _value;\\n    }\\n\\n    function _stakeForWithdrawal(address sender, uint256 amount) internal {\\n        UserEntry memory ue = userEntries[sender];\\n        ue.amount = ue.amount + amount;\\n        ue.blocknum = block.number;\\n        userEntries[sender] = ue;\\n    }\\n\\n    function _withdraw(address sender, uint256 amount) internal {\\n        UserEntry memory ue = userEntries[sender];\\n        if (amount > ue.amount) {\\n            revert Errors.InvalidAmount();\\n        }\\n\\n        if (amount == ue.amount) {\\n            delete userEntries[sender];\\n        } else {\\n            ue.amount = ue.amount - amount;\\n            ue.blocknum = block.number;\\n            userEntries[sender] = ue;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7475970bd9b373e9a671b090676a143db81e57f498352bbb9d1ac9a50d5b8d02\",\"license\":\"BUSL-1.1\"},\"contracts/v2/lib/GranularPause.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.20;\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title GranularPause \\n/// @author ChimeraDefi - chimera_defi@protonmail.com\\n/// @notice allows more granular control of pausing functions\\n/// @dev Inherit in child contract, you need to number each function you want to pause\\n\\nabstract contract GranularPause is Context {\\n    mapping(uint16 => bool) public paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account, uint16 item);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account, uint16 item);\\n\\n    error IsPaused();\\n    error IsNotPaused();\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused(uint16 _id) {\\n        if (paused[_id]) {\\n            revert IsPaused();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused(uint16 _id) {\\n        if (!paused[_id]) {\\n            revert IsNotPaused();\\n        }\\n        _;\\n    }\\n\\n    /// @notice pauses a function\\n    /// @param _id id of function to pause\\n    function _pause(uint16 _id) internal virtual {\\n        paused[_id] = true;\\n        emit Paused(_msgSender(), _id);\\n    }\\n\\n    /// @notice unpauses a function\\n    /// @param _id id of function to unpause\\n    function _unpause(uint16 _id) internal virtual {\\n        paused[_id] = false;\\n        emit Unpaused(_msgSender(), _id);\\n    }\\n}\\n\\n\",\"keccak256\":\"0x49069f2e183ef89b36245e2905afda4a49274f1f1d189510b80939659a6d8988\",\"license\":\"BUSL-1.1\"},\"contracts/v2/lib/OperatorSettable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.20;\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @title OperatorSettable\\n * @author Sharedstake\\n * @notice Handles operators for ERC-7450 like contracts\\n */\\nabstract contract OperatorSettable {\\n    mapping(address requester => mapping(address operator => bool)) public isOperator;\\n    event OperatorSet(address indexed owner, address indexed operator, bool value);\\n\\n    modifier onlyOwnerOrOperator(address owner) {\\n        if (owner != msg.sender && !isOperator[owner][msg.sender]) {\\n            revert Errors.PermissionDenied();\\n        }\\n        _;\\n    }\\n\\n    function setOperator(address operator, bool approved) external returns (bool) {\\n        isOperator[msg.sender][operator] = approved;\\n        emit OperatorSet(msg.sender, operator, approved);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xc45fe8bc3a1c1b2da225e27f82e4dd95b5a4143b6a291167deb45e20d72269d6\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162001b0038038062001b008339810160408190526200003491620001b8565b6001805560048181556001600160a01b03848116608081905290841660a081905260405163095ea7b360e01b815292830191909152600019602483018190529163095ea7b3906044016020604051808303816000875af11580156200009d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000c39190620001f9565b50620000f07f8eeeb5290718f324aa0965d35cf24b6163c00698ab277824ce00bdf229264ecf33620000fa565b5050505062000224565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000197576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001563390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b80516001600160a01b0381168114620001b357600080fd5b919050565b600080600060608486031215620001ce57600080fd5b620001d9846200019b565b9250620001e9602085016200019b565b9150604084015190509250925092565b6000602082840312156200020c57600080fd5b815180151581146200021d57600080fd5b9392505050565b60805160a0516118856200027b600039600081816104940152818161092701528181610a0b0152610c3b01526000818161054001528181610d6401528181610da901528181610e1b0152610f9c01526118856000f3fe60806040526004361061015a5760003560e01c80637a6f12ff116100c8578063a217fddf11610084578063ba08765211610061578063ba087652146104ce578063d4b825a7146104ee578063d547741f1461050e578063fe6d81241461052e57005b8063a217fddf14610432578063b6363cf214610447578063b8902ff71461048257005b80637a6f12ff146103465780637ce7eada1461035c5780637d41c86e1461037c5780638d158c2a1461039c57806391d14854146103c95780639f10a990146103e957005b806336568abe1161011757806336568abe1461027a57806353dc1dd31461029a57806354eea796146102d0578063558a7297146102f057806357d775f8146103105780636e8b2bb81461032657005b806288d3e51461016357806301ffc9a714610196578063180cb47f146101c6578063248a9ca3146101fa5780632f2ff15d1461022a5780633375ed6b1461024a57005b3661016157005b005b34801561016f57600080fd5b5061018361017e366004611512565b610562565b6040519081526020015b60405180910390f35b3480156101a257600080fd5b506101b66101b136600461152d565b6105dc565b604051901515815260200161018d565b3480156101d257600080fd5b506101837f8eeeb5290718f324aa0965d35cf24b6163c00698ab277824ce00bdf229264ecf81565b34801561020657600080fd5b50610183610215366004611557565b60009081526020819052604090206001015490565b34801561023657600080fd5b50610161610245366004611570565b610613565b34801561025657600080fd5b506101b661026536600461159c565b60026020526000908152604090205460ff1681565b34801561028657600080fd5b50610161610295366004611570565b61063d565b3480156102a657600080fd5b506101836102b5366004611512565b6001600160a01b03166000908152600b602052604090205490565b3480156102dc57600080fd5b506101616102eb366004611557565b6106c0565b3480156102fc57600080fd5b506101b661030b3660046115ce565b6106f3565b34801561031c57600080fd5b5061018360045481565b34801561033257600080fd5b506101b6610341366004611605565b610763565b34801561035257600080fd5b5061018360095481565b34801561036857600080fd5b5061016161037736600461159c565b6107cc565b34801561038857600080fd5b50610183610397366004611638565b610825565b3480156103a857600080fd5b506101836103b7366004611512565b600b6020526000908152604090205481565b3480156103d557600080fd5b506101b66103e4366004611570565b610b26565b3480156103f557600080fd5b5061041d610404366004611512565b6003602052600090815260409020805460019091015482565b6040805192835260208301919091520161018d565b34801561043e57600080fd5b50610183600081565b34801561045357600080fd5b506101b6610462366004611674565b600560209081526000928352604080842090915290825290205460ff1681565b34801561048e57600080fd5b506104b67f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161018d565b3480156104da57600080fd5b506101836104e9366004611638565b610b4f565b3480156104fa57600080fd5b506101b6610509366004611605565b610ecb565b34801561051a57600080fd5b50610161610529366004611570565b610f68565b34801561053a57600080fd5b506104b67f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b0381166000908152600b6020526040812054158015906105ae57506105ae82610590610f8d565b6001600160a01b0385166000908152600b6020526040902054610763565b156105cf57506001600160a01b03166000908152600b602052604090205490565b506000919050565b919050565b60006001600160e01b03198216637965db0b60e01b148061060d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60008281526020819052604090206001015461062e81610fc8565b6106388383610fd5565b505050565b6001600160a01b03811633146106b25760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6106bc8282611059565b5050565b7f8eeeb5290718f324aa0965d35cf24b6163c00698ab277824ce00bdf229264ecf6106ea81610fc8565b6106bc826110be565b3360008181526005602090815260408083206001600160a01b038716808552908352818420805460ff191687151590811790915591519182529293917fceb576d9f15e4e200fdb5096d64d5dfd667e16def20c1eefd14256d8e3faa267910160405180910390a350600192915050565b6001600160a01b038316600090815260036020908152604080832081518083019092528054825260010154918101919091528383118015906107a6575080518311155b80156107c3575060045481602001516107bf91906116b4565b4310155b95945050505050565b7f8eeeb5290718f324aa0965d35cf24b6163c00698ab277824ce00bdf229264ecf6107f681610fc8565b61ffff821660009081526002602052604090205460ff16801561081c57610638836110e4565b61063883611149565b6000816001600160a01b038116331480159061086557506001600160a01b038116600090815260056020908152604080832033845290915290205460ff16155b1561088357604051630782484160e21b815260040160405180910390fd5b61088b61118f565b6001600081905260026020527fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e05460ff16156108da57604051631309a56360e01b815260040160405180910390fd5b856000036108fb5760405163162908e360e11b815260040160405180910390fd5b6040516323b872dd60e01b81526001600160a01b038581166004830152306024830152604482018890527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064016020604051808303816000875af1158015610970573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099491906116c7565b50600780549060006109a5836116e4565b909155506040805180820182526001600160a01b03888116825260208083018b81526000868152600a909252848220935184546001600160a01b03191690841617845551600190930192909255915163266d6a8360e11b8152600481018a9052929550917f000000000000000000000000000000000000000000000000000000000000000090911690634cdad50690602401602060405180830381865afa158015610a54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7891906116fd565b9050610a8485826111e8565b8060066000828254610a9691906116b4565b90915550506001600160a01b0386166000908152600b602052604081208054839290610ac39084906116b4565b9091555050604080513381526020810189905285916001600160a01b0380891692908a16917f1fdc681a13d8c5da54e301c7ce6542dcde4581e4725043fdab2db12ddc574506910160405180910390a45050610b1e60018055565b509392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000816001600160a01b0381163314801590610b8f57506001600160a01b038116600090815260056020908152604080832033845290915290205460ff16155b15610bad57604051630782484160e21b815260040160405180910390fd5b610bb561118f565b6002600081905260208190527f679795a0195a1b76cdebb7c51d74e058aee92919b8c3389af86ef24535e8a28c5460ff1615610c0457604051631309a56360e01b815260040160405180910390fd5b85600003610c255760405163162908e360e11b815260040160405180910390fd5b60405163266d6a8360e11b8152600481018790527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634cdad50690602401602060405180830381865afa158015610c8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cae91906116fd565b925082610cba85610562565b1015610cdc57610cd284610ccc610f8d565b85610ecb565b5060009250610ec1565b610ce68484611260565b6001600160a01b0384166000908152600b602052604081208054859290610d0e908490611716565b925050819055508260066000828254610d279190611716565b925050819055508260096000828254610d4091906116b4565b909155505060088054906000610d55836116e4565b90915550506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163180841115610df5576000610d998286611716565b6040519091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169082156108fc029083906000818181858888f19350505050158015610df2573d6000803e3d6000fd5b50505b60405163566110b560e11b8152600481018890526001600160a01b0387811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063acc2216a90604401600060405180830381600087803b158015610e5f57600080fd5b505af1158015610e73573d6000803e3d6000fd5b5050604080518a8152602081018890526001600160a01b03808b169450891692507f3f693fff038bb8a046aa76d9516190ac7444f7d69cf952c4cbdc086fdef2d6fc910160405180910390a3505b50610b1e60018055565b6001600160a01b03831660009081526003602090815260408083208151808301909252805482526001015491810191909152838311801590610f0e575080518311155b610f2b5760405163162908e360e11b815260040160405180910390fd5b6004548160200151610f3d91906116b4565b431015610f5d5760405163085de62560e01b815260040160405180910390fd5b506001949350505050565b600082815260208190526040902060010154610f8381610fc8565b6106388383611059565b6000610fc36001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001631476116b4565b905090565b610fd281336112ed565b50565b610fdf8282610b26565b6106bc576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556110153390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6110638282610b26565b156106bc576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b806000036110df5760405163162908e360e11b815260040160405180910390fd5b600455565b61ffff81166000908152600260205260409020805460ff191690557ffecc441e78e32a5c28004d47baebe659faee4271cbb13a7c05457fed0c771232335b604080516001600160a01b03909216825261ffff841660208301520160405180910390a150565b61ffff81166000908152600260205260409020805460ff191660011790557f38eb43248f2146c7882ffb321eebe73c10ee8fc9fe3a42102dd07937caba4f536111223390565b6002600154036111e15760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106a9565b6002600155565b6001600160a01b03821660009081526003602090815260409182902082518084019093528054808452600190910154918301919091526112299083906116b4565b81524360208083019182526001600160a01b0390941660009081526003909452604090932090518155915160019092019190915550565b6001600160a01b03821660009081526003602090815260409182902082518084019093528054808452600190910154918301919091528211156112b65760405163162908e360e11b815260040160405180910390fd5b805182036112e05750506001600160a01b0316600090815260036020526040812081815560010155565b8051611229908390611716565b6112f78282610b26565b6106bc5761130481611346565b61130f836020611358565b60405160200161132092919061174d565b60408051601f198184030181529082905262461bcd60e51b82526106a9916004016117c2565b606061060d6001600160a01b03831660145b606060006113678360026117f5565b6113729060026116b4565b67ffffffffffffffff81111561138a5761138a61180c565b6040519080825280601f01601f1916602001820160405280156113b4576020820181803683370190505b509050600360fc1b816000815181106113cf576113cf611822565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106113fe576113fe611822565b60200101906001600160f81b031916908160001a90535060006114228460026117f5565b61142d9060016116b4565b90505b60018111156114a5576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061146157611461611822565b1a60f81b82828151811061147757611477611822565b60200101906001600160f81b031916908160001a90535060049490941c9361149e81611838565b9050611430565b5083156114f45760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106a9565b9392505050565b80356001600160a01b03811681146105d757600080fd5b60006020828403121561152457600080fd5b6114f4826114fb565b60006020828403121561153f57600080fd5b81356001600160e01b0319811681146114f457600080fd5b60006020828403121561156957600080fd5b5035919050565b6000806040838503121561158357600080fd5b82359150611593602084016114fb565b90509250929050565b6000602082840312156115ae57600080fd5b813561ffff811681146114f457600080fd5b8015158114610fd257600080fd5b600080604083850312156115e157600080fd5b6115ea836114fb565b915060208301356115fa816115c0565b809150509250929050565b60008060006060848603121561161a57600080fd5b611623846114fb565b95602085013595506040909401359392505050565b60008060006060848603121561164d57600080fd5b8335925061165d602085016114fb565b915061166b604085016114fb565b90509250925092565b6000806040838503121561168757600080fd5b611690836114fb565b9150611593602084016114fb565b634e487b7160e01b600052601160045260246000fd5b8082018082111561060d5761060d61169e565b6000602082840312156116d957600080fd5b81516114f4816115c0565b6000600182016116f6576116f661169e565b5060010190565b60006020828403121561170f57600080fd5b5051919050565b8181038181111561060d5761060d61169e565b60005b8381101561174457818101518382015260200161172c565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611785816017850160208801611729565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516117b6816028840160208801611729565b01602801949350505050565b60208152600082518060208401526117e1816040850160208701611729565b601f01601f19169190910160400192915050565b808202811582820484141761060d5761060d61169e565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000816118475761184761169e565b50600019019056fea2646970667358221220254bd4aab919e8b255f1c139b44e4faa367bfd74ea9bf9d25d82d0c3e7cc385f64736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "@ChimeraDefi - chimera_defi@protonmail.com | sharedstake.org",
    "details": "- ERC-7540 inspired withdrawal contract This contract is designed to be used with SharedDepositMinterV2 contract As a module extension that adds 7540 methods requestRedeem and redeem Example flow -> user calls requestRedeem(user, user, userShares) user calls setOperator(admin OR protocol provided keeper, true) admin can now call redeem on the users behalf if needed after epoch user calls redeem(user, user, userShares) after waiting for epoch Caveats: If the user requests another redemption, before fulfillment, this resets the epoch length clock for their request Basic upgrade path: 1. Call togglePause(1), this disables the requestRedeem fn so no new requests 2. Deploy new contract, direct users to it 3. Fulfill any remaining redeemRequests i.e. totalPendingRequest, for all RedeemRequest events from requestsFulfilled to requestsCreated",
    "events": {
      "Paused(address,uint16)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Unpaused(address,uint16)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "WithdrawalQueue",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3628,
        "contract": "contracts/v2/core/WithdrawalQueue.sol:WithdrawalQueue",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)3623_storage)"
      },
      {
        "astId": 4774,
        "contract": "contracts/v2/core/WithdrawalQueue.sol:WithdrawalQueue",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 17088,
        "contract": "contracts/v2/core/WithdrawalQueue.sol:WithdrawalQueue",
        "label": "paused",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint16,t_bool)"
      },
      {
        "astId": 16855,
        "contract": "contracts/v2/core/WithdrawalQueue.sol:WithdrawalQueue",
        "label": "userEntries",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(UserEntry)16850_storage)"
      },
      {
        "astId": 16857,
        "contract": "contracts/v2/core/WithdrawalQueue.sol:WithdrawalQueue",
        "label": "epochLength",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 17187,
        "contract": "contracts/v2/core/WithdrawalQueue.sol:WithdrawalQueue",
        "label": "isOperator",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 15888,
        "contract": "contracts/v2/core/WithdrawalQueue.sol:WithdrawalQueue",
        "label": "totalPendingRequest",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 15890,
        "contract": "contracts/v2/core/WithdrawalQueue.sol:WithdrawalQueue",
        "label": "requestsCreated",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 15892,
        "contract": "contracts/v2/core/WithdrawalQueue.sol:WithdrawalQueue",
        "label": "requestsFulfilled",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 15894,
        "contract": "contracts/v2/core/WithdrawalQueue.sol:WithdrawalQueue",
        "label": "totalAssetsOut",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 15904,
        "contract": "contracts/v2/core/WithdrawalQueue.sol:WithdrawalQueue",
        "label": "requests",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(Request)15882_storage)"
      },
      {
        "astId": 15908,
        "contract": "contracts/v2/core/WithdrawalQueue.sol:WithdrawalQueue",
        "label": "redeemRequests",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(UserEntry)16850_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FIFOQueue.UserEntry)",
        "numberOfBytes": "32",
        "value": "t_struct(UserEntry)16850_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)3623_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)3623_storage"
      },
      "t_mapping(t_uint16,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Request)15882_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct WithdrawalQueue.Request)",
        "numberOfBytes": "32",
        "value": "t_struct(Request)15882_storage"
      },
      "t_struct(Request)15882_storage": {
        "encoding": "inplace",
        "label": "struct WithdrawalQueue.Request",
        "members": [
          {
            "astId": 15879,
            "contract": "contracts/v2/core/WithdrawalQueue.sol:WithdrawalQueue",
            "label": "requester",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 15881,
            "contract": "contracts/v2/core/WithdrawalQueue.sol:WithdrawalQueue",
            "label": "shares",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)3623_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 3620,
            "contract": "contracts/v2/core/WithdrawalQueue.sol:WithdrawalQueue",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 3622,
            "contract": "contracts/v2/core/WithdrawalQueue.sol:WithdrawalQueue",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserEntry)16850_storage": {
        "encoding": "inplace",
        "label": "struct FIFOQueue.UserEntry",
        "members": [
          {
            "astId": 16847,
            "contract": "contracts/v2/core/WithdrawalQueue.sol:WithdrawalQueue",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16849,
            "contract": "contracts/v2/core/WithdrawalQueue.sol:WithdrawalQueue",
            "label": "blocknum",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
